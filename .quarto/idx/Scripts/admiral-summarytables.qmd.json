{"title":"Summary statistics and tables","markdown":{"yaml":{"title":"Summary statistics and tables","author":"Mohammed Shas","julia":{"execflags":["--project=."]}},"headingText":"Load Packages","containsRefs":false,"markdown":"\n\n**Reference:** This article was used as a reference — [CDISC Pilot NCA Analysis](https://agstn.github.io/CPR_gtsummary/CPR_gtsummary.html)\n\n\n\n<details>\n<summary> Package Imports and Setup</summary>\n\n\n```{julia}\nusing DataFrames\nusing CategoricalArrays\nusing DataFramesMeta\nusing ReadStatTables\nusing SummaryTables\nusing Printf\nusing HypothesisTests\nusing ReadStat\nusing StatsModels, StatsPlots, Statistics\n\ninclude(\"con-fun.jl\")\n```\n\n</details>\n<details>\n<summary>Data Loading</summary>\n\n\n## Read the datasets\n\n```{julia}\npath = joinpath(@__DIR__, \"..\", \"Datasets\") |> normpath\npc = @chain readstat(joinpath(path, \"pc.xpt\")) DataFrame convert_blanks_to_missing\nex = @chain readstat(joinpath(path, \"ex.xpt\")) DataFrame convert_blanks_to_missing\nvs = @chain readstat(joinpath(path, \"vs.xpt\")) DataFrame convert_blanks_to_missing\nlb = @chain readstat(joinpath(path, \"lb.xpt\")) DataFrame convert_blanks_to_missing\nadsl = @chain readstat(joinpath(path, \"adsl.xpt\")) DataFrame convert_blanks_to_missing\nadsl_orig = @chain readstat(joinpath(path, \"adsl_orig.xpt\")) DataFrame convert_blanks_to_missing\nadqsadas_orig = @chain readstat(joinpath(path, \"adqsadas_orig.xpt\")) DataFrame convert_blanks_to_missing\nadqscibc_orig = @chain readstat(joinpath(path, \"adqscibc_orig.xpt\")) DataFrame convert_blanks_to_missing\nadae_orig = @chain readstat(joinpath(path, \"adae_orig.xpt\")) DataFrame convert_blanks_to_missing\nadlbh = @chain readstat(joinpath(path, \"adlbh.xpt\")) DataFrame convert_blanks_to_missing\nadlbc = @chain readstat(joinpath(path, \"adlbc.xpt\")) DataFrame convert_blanks_to_missing\nadlbh_orig = @chain readstat(joinpath(path, \"adlbh_orig.xpt\")) DataFrame convert_blanks_to_missing\nadlbc_orig = @chain readstat(joinpath(path, \"adlbc_orig.xpt\")) DataFrame convert_blanks_to_missing\nadlbhy_orig = @chain readstat(joinpath(path, \"adlbhy_orig.xpt\")) DataFrame convert_blanks_to_missing\n\n```\n\n## TABLE 1\n\n</details>\n<details>\n<summary>Data Preparation - Table 1</summary>\n\n\n```{julia}\nadsl_prep = @chain adsl_orig begin\n    @transform :TRT01P = categorical(:TRT01P,\n        levels = [\"Placebo\", \"Xanomeline Low Dose\", \"Xanomeline High Dose\"],\n        ordered = true)\n    @transform :TRT01P = recode(:TRT01P,\n        \"Xanomeline Low Dose\" => \"Low Dose\",\n        \"Xanomeline High Dose\" => \"High Dose\")\n    \n    @select :USUBJID :TRT01P :ITTFL :SAFFL :EFFFL :COMP24FL :DCDECOD \n\nend\n```\n\n</details>\n\n\n```{julia}\n#| echo: false\ntbl = table_one(\n    adsl_prep,\n    [:ITTFL => \"INTENT-TO-TREAT\", :SAFFL => \"SAFETY\", :EFFFL => \"EFFICACY\", :COMP24FL => \"COMPLETE WEEK 24\",:DCDECOD => \"Complete Study\" ],\n    groupby = :TRT01P => \"XANOMELINE\",\n    show_pvalues = true,\n    show_n = true\n)\n```\n\n## TABLE 2\n\n\n<details>\n<summary>Data Preparation - Table 2</summary>\n\n\n```{julia}\nadsl_prep = @chain adsl_orig begin\n    @transform :TRT01P = categorical(:TRT01P,\n        levels = [\"Placebo\", \"Xanomeline Low Dose\", \"Xanomeline High Dose\"],\n        ordered = true)\n    @transform :TRT01P = recode(:TRT01P,\n        \"Xanomeline Low Dose\" => \"Low Dose\",\n        \"Xanomeline High Dose\" => \"High Dose\")\n    \n    @rtransform :COMP24FL = ifelse(:COMP24FL == \"Y\", \n        \"Completed Week 24\", \n        ifelse(:COMP24FL == \"N\", \"Early Termination (prior to Week 24)\", missing))\n\n    @rtransform :DCDECOD = ifelse(:COMP24FL == \"Completed Week 24\" && :DCDECOD != \"Complete\",\n        \"Completed\", :DCDECOD)\nend\n```\n\n</details>\n<details>\n<summary>Data wrangling</summary>\n\n```{julia}\ndcdecod_map = Dict(\n    \"Withdrawal By Subject\" => \"Subject decided to withdraw\",\n    \"Study Terminated By Sponsor\" => \"Sponsor decision\",\n    \"Physician Decision\" => \"Physician decided to withdraw subject\",\n    \"Protocol Violation\" => missing\n)\n\nadsl = @chain adsl_orig begin\n    @rtransform :DCDECOD = get(dcdecod_map, titlecase(strip(:DCDECOD)), titlecase(strip(:DCDECOD)))\nend\n```\n\n</details>\n<details>\n<summary>Data wrangling</summary>\n\n\n```{julia}\nallowed_levels = [\n    \"Adverse Event\",\n    \"Death\",\n    \"Lack Of Efficacy\",\n    \"Lost To Follow-Up\",\n    \"Subject decided to withdraw\"\n]\n\nadsl = @chain adsl begin\n    @rtransform :DCDECOD = get(\n        Dict(\n            \"Adverse Event\" => \"Adverse Event\",\n            \"Death\" => \"Death\",\n            \"Lack Of Efficacy\" => \"Lack Of Efficacy\",\n            \"Lost To Follow-Up\" => \"Lost To Follow-Up\",\n            \"Subject decided to withdraw\" => \"Subject decided to withdraw\"\n        ),\n        :DCDECOD,\n        missing\n    )\nend\n\nadsl.DCDECOD = categorical(adsl.DCDECOD, levels=allowed_levels, ordered=true)\n```\n\n\n</details>\n<details>\n<summary>Data wrangling</summary>\n\n\n```{julia}\np_loefl = @chain adsl begin\n    @rtransform :loefl = if ismissing(:DCDECOD)\n        0\n    else\n        :DCDECOD == \"Lack Of Efficacy\" ? 1 : 0\n    end\n    groupby(:TRT01P)\n    combine(_, :loefl => sum => :count)\nend\n```\n\n</details>\n\n\n```{julia}\n#| echo: false\ntbl1 = table_one(\n    adsl,\n    [:COMP24FL => \"Completion Status\",\n     :DCDECOD => \"Reason for Early Termination (prior to Week 24)\"],\n    groupby = :TRT01P => \"XANOMELINE\",\n    show_pvalues = true,\n    show_n = true\n)\n```\n\n\n## TABLE 3\n\n<details>\n<summary>Data Preparation - Table 3</summary>\n\n\n```{julia}\nadsl_l = @chain adsl_orig begin\n    @select :USUBJID :SITEGR1 :SITEID :TRT01P :ITTFL :EFFFL :COMP24FL\n    @transform :SITE = string(:SITEGR1, \" — \", :SITEID)\n    stack(Not([:USUBJID, :SITEGR1, :SITEID, :TRT01P, :SITE]), variable_name = :DESC, value_name = :YN)\n    @rtransform :YN = :YN == \"Y\" ? 1 : 0\n    @rsubset :YN == 1\n    @rtransform :DESC = ifelse(:DESC == \"ITTFL\", \"ITT\",\n                         :DESC == \"EFFFL\" ? \"Eff\" :\n                         :DESC == \"COMP24FL\" ? \"Com\" : missing)\nend\n```\n\n</details>\n<details>\n<summary>Data wrangling</summary>\n\n\n\n\n```{julia}\n\nadsl_l = @chain adsl_orig begin\n    @select :SUBJID :SITEID :TRT01P :ITTFL :EFFFL :COMP24FL\n    @rtransform :SITE = string(:SITEID)\n    stack([:ITTFL, :EFFFL, :COMP24FL], \n          [:SUBJID, :SITEID, :TRT01P, :SITE], \n          variable_name = :DESC, value_name = :YN)\n\n    @rtransform :YN = :YN == \"Y\" ? 1 : 0\n    @rsubset :YN == 1\n\n    @rtransform :DESC = if :DESC == \"ITTFL\"\n        \"ITT\"\n    elseif :DESC == \"EFFFL\"\n        \"Eff\"\n    elseif :DESC == \"COMP24FL\"\n        \"Com\"\n    else\n        missing\n    end\n\n    @transform :DESC = categorical(:DESC, levels = [\"ITT\", \"Eff\", \"Com\"])\n    @transform :TRT01P = categorical(:TRT01P,\n        levels = [\"Placebo\", \"Xanomeline Low Dose\", \"Xanomeline High Dose\"],\n        ordered = true)\n    @transform :TRT01P = recode(:TRT01P,\n        \"Xanomeline Low Dose\" => \"Low Dose\",\n        \"Xanomeline High Dose\" => \"High Dose\")\n    \nend\n```\n\n</details>\n\n\n```{julia}\n#| echo: false\ntbl2 = table_one(\n    adsl_l,\n    :SITEID => \"Pooled-SITEID\",\n    groupby = [:TRT01P => \"Dose\", :DESC => \"Desc\"],\n    show_n = true\n)\n```\n\n## TABLE 4\n<details>\n<summary>Data Preparation - Table 4</summary>\n\n\n```{julia}\nadsl_demo = @chain adsl_orig begin\n    @transform :TRT01P = categorical(:TRT01P,\n        levels = [\"Placebo\", \"Xanomeline Low Dose\", \"Xanomeline High Dose\"],\n        ordered = true)\n    @transform :TRT01P = recode(:TRT01P,\n        \"Xanomeline Low Dose\" => \"Low Dose\",\n        \"Xanomeline High Dose\" => \"High Dose\")\n    @transform :SEX = recode(categorical(:SEX), \"F\" => \"Female\", \"M\" => \"Male\")\n    @transform :SEX = categorical(:SEX, levels = [\"Female\", \"Male\"], ordered = true)\n    @transform :AGEGR1 = recode(categorical(:AGEGR1),\n        \"<65\" => \"<65 yrs\",\n        \"65-80\" => \"65-80 yrs\",\n        \">80\" => \">80 yrs\")\n    @transform :RACE = titlecase.(strip.(:RACE))\n    @transform :BMIBLGR1 = categorical(:BMIBLGR1,\n        levels = [\"<25\", \"25-<30\", \">=30\"], ordered = true)\n    @transform :DURDSGR1 = recode(categorical(:DURDSGR1),\n        \"<12 Months\" => \"<12 months\",\n        \">=12 Months\" => \">=12 months\")\nend\n```\n\n</details>\n\n\n```{julia}\n#| echo: false\n\nfunction custom_analysis(column)\n    (\n        length(column) => \"n\",\n        mean(column) => \"Mean\",\n        std(column) => \"SD\",\n        median(column) => \"Median\",\n        minimum(column) => \"Min\",\n        maximum(column) => \"Max\",\n    )\nend\ntbl_demo = table_one(\n    adsl_demo,\n    [\n        :AGE => custom_analysis => \"Age (y)\",\n        :AGEGR1 => \"\",\n        :SEX => \"Sex\",\n        :RACE => \"Race (Origin)\",\n        :MMSETOT => custom_analysis => \"MMSE\",\n        :DURDIS => custom_analysis => \"Duration of disease\",\n        :DURDSGR1 => \"\",\n        :BMIBL => \"Baseline BMI\",\n        :BMIBLGR1 => \"\"\n    ];\n    groupby = :TRT01P => \"Treatment Arm\",\n    show_total = true,\n    total_name = \"Overall\",\n    show_pvalues = true,\n    show_n = true\n)\n```\n\n\n\n\n## TABLE 5\n\n<details>\n<summary>Data Preparation - Table 5</summary>\n\n\n```{julia}\nadqsadas = @chain adqsadas_orig begin\n    @rsubset :EFFFL == \"Y\" && :ITTFL == \"Y\" && :PARAMCD == \"ACTOT\" && :ANL01FL == \"Y\"\n    @rsubset :AVISITN in (0, 24)\n    dropmissing(:CHG)\n    @transform :TRTP = recode(categorical(:TRTP),\n        \"Xanomeline Low Dose\" => \"Low Dose\",\n        \"Xanomeline High Dose\" => \"High Dose\"\n    )\n    @transform :TRTP = categorical(:TRTP, levels=[\"Placebo\", \"Low Dose\", \"High Dose\"], ordered=true)\nend\n```\n\n\n</details>\n\n\n```{julia}\n#| echo: false\n\ntbl_sum = table_one(\n    adqsadas,\n    [\n        :BASE => \"Baseline\",\n        :AVAL => \"Week 24\",\n        :CHG => \"Change from Baseline\"\n    ];\n    groupby = :TRTP => \"Treatment Arm\",\n    show_total = true,\n    total_name = \"Overall\",\n    show_pvalues = true,\n    show_n = true,\n\n)\n```\n\n\n## TABLE 06\n\n<details>\n<summary>Data Preparation - Table 6</summary>\n\n\n\n```{julia}\nadqsadas_locf = @chain adqsadas_orig begin\n    @rsubset :EFFFL == \"Y\" && :ITTFL == \"Y\" && :PARAMCD == \"ACTOT\" && :ANL01FL == \"Y\"\n    @rsubset :AVISITN in (0, 8, 16, 24)\n    @select :USUBJID :TRTP :AVISIT :AVISITN :AVAL :BASE :CHG\n    @transform :SET = \"LOCF\"\nend\n```\n\n</details>\n<details>\n<summary>Data wrangling</summary>\n\n```{julia}\nadqsadas_win = @chain adqsadas_orig begin\n    @rsubset :EFFFL == \"Y\" && :ITTFL == \"Y\" && :PARAMCD == \"ACTOT\" && :ANL01FL == \"Y\"\n    @rsubset :AVISITN in (0, 8, 16, 24)\n    @rsubset :AVISITN != 0 && :DTYPE != \"LOCF\"\n    @select :USUBJID :TRTP :AVISIT :AVISITN :AVAL :BASE :CHG\n    @transform :SET = \"Windowed\"\nend\n```\n\n</details>\n<details>\n<summary>Data wrangling</summary>\n\n```{julia}\nadqsadas_l = @chain vcat(adqsadas_locf, adqsadas_win) begin\n    @rtransform :AVISIT_SET = if :AVISIT == \"Baseline\"\n        \"Baseline\"\n    else\n        string(:AVISIT, \" (\", :SET, \")\")\n    end\n\n    @transform :AVISIT_SET = categorical(:AVISIT_SET,\n        levels = [\"Baseline\", \n                  \"Week 8 (Windowed)\", \"Week 16 (Windowed)\", \"Week 24 (Windowed)\",\n                  \"Week 8 (LOCF)\", \"Week 16 (LOCF)\", \"Week 24 (LOCF)\"],\n        ordered = true)\n\n    @transform :TRTP = categorical(:TRTP,\n        levels = [\"Placebo\", \"Xanomeline Low Dose\", \"Xanomeline High Dose\"],\n        ordered = true)\n\n    @transform :TRTP = recode(:TRTP,\n        \"Xanomeline Low Dose\" => \"Low Dose\",\n        \"Xanomeline High Dose\" => \"High Dose\")\nend\n\n```\n\n</details>\n<details>\n<summary>Data wrangling</summary>\n\n```{julia}\naval_long = stack(adqsadas_l, [:AVAL, :BASE, :CHG], variable_name = :VAR, value_name = :AVAL_VAL)\naval_long = dropmissing(aval_long, :AVAL_VAL)\n\n```\n\n</details>\n<details>\n<summary>Data wrangling</summary>\n\n```{julia}\nfunction stats_summary(x)\n    NamedTuple{(:N, :Mean, :SD, :Median, :Min, :Max)}((\n        length(x),\n        mean(x),\n        std(x),\n        median(x),\n        minimum(x),\n        maximum(x)\n    ))\nend\n```\n\n</details>\n<details>\n<summary>Data wrangling</summary>\n\n```{julia}\nsummary_long = @chain aval_long begin\n    groupby([:AVISIT_SET, :TRTP, :VAR])\n    combine(:AVAL_VAL => stats_summary => AsTable)\nend\nnames(summary_long)\n\n```\n\n</details>\n<details>\n<summary>Data wrangling</summary>\n\n\n```{julia}\nstats = [\"N\", \"Mean\", \"SD\", \"Median\", \"Min\", \"Max\"]\nunstacked_stats = Dict()\nfor stat in stats\n    stat_col = Symbol(stat)\n    df = select(summary_long, [:AVISIT_SET, :TRTP, :VAR, stat_col])\n    wide = unstack(df, [:AVISIT_SET, :TRTP], :VAR, stat_col)\n    \n    # Create a dictionary for renaming\n    old_names = Symbol.(names(wide)[3:end])\n    new_names = [Symbol(\"$(n)_$stat\") for n in old_names]\n    rename_dict = Dict(zip(old_names, new_names))\n    \n    rename!(wide, rename_dict)\n    unstacked_stats[stat] = wide\nend\nwide_tbl = reduce((d1, d2) -> outerjoin(d1, d2, on=[:AVISIT_SET, :TRTP]), values(unstacked_stats))\n\n```\n\n</details>\n\n\n```{julia}\n#| echo: false\n\ntbl_demo1 = table_one(\n    wide_tbl,\n    [Symbol(col) => \"\" for col in names(wide_tbl) if col ∉ [\"AVISIT_SET\", \"TRTP\"]],\n    groupby = [:TRTP => \"Treatment\", :AVISIT_SET => \"Visit\"]\n)\n\n```\n\n## TABLE 7\n<details>\n<summary>Data Preparation - Table 7</summary>\n\n\n\n\n```{julia}\nadqscibc = @chain adqscibc_orig begin\n    @rsubset :EFFFL == \"Y\" && :ITTFL == \"Y\" && :AVISITN in (8, 16, 24) && :ANL01FL == \"Y\"\n    @select :USUBJID :TRTP :SITEGR1 :AVISIT :AVISITN :AVAL\n    @rtransform :AVALC = begin\n        val = string(:AVAL)\n        if val == \"1\"\n            \"Marked improvement\"\n        elseif val == \"2\"\n            \"Moderate improvement\"\n        elseif val == \"3\"\n            \"Minimal improvement\"\n        elseif val == \"4\"\n            \"No Change\"\n        elseif val == \"5\"\n            \"Minimal worsening\"\n        elseif val == \"6\"\n            \"Moderate worsening\"\n        elseif val == \"7\"\n            \"Marked worsening\"\n        else\n            missing\n        end\n    end\nend\n```\n\n</details>\n<details>\n<summary>Data wrangling</summary>\n\n```{julia}\naval_labels = Dict(\n    1 => \"Marked improvement\",\n    2 => \"Moderate improvement\",\n    3 => \"Minimal improvement\",\n    4 => \"No Change\",\n    5 => \"Minimal worsening\",\n    6 => \"Moderate worsening\",\n    7 => \"Marked worsening\"\n)\n\nlevels_order = [\n    \"Marked improvement\",\n    \"Moderate improvement\",\n    \"Minimal improvement\",\n    \"No Change\",\n    \"Minimal worsening\",\n    \"Moderate worsening\",\n    \"Marked worsening\"\n]\n\nadqscibc = @chain adqscibc begin\n    @rtransform :AVALC = get(aval_labels, :AVAL, missing)\n    @transform :AVALC = categorical(:AVALC, levels = levels_order, ordered = true)\n    \n    @transform :TRTP = recode(:TRTP,\n        \"Xanomeline Low Dose\" => \"Low Dose\",\n        \"Xanomeline High Dose\" => \"High Dose\")\n    \n    @transform :TRTP = categorical(:TRTP,\n        levels = [\"Placebo\", \"Low Dose\", \"High Dose\"])\n    \n    @transform :AVISIT = categorical(:AVISIT,\n        levels = [\"Week 8\", \"Week 16\", \"Week 24\"], ordered = true)\nend\n```\n\n</details>\n\n\n```{julia}\n#| echo: false\n\ntbl3 = summarytable(\n    adqscibc,\n    :AVAL => \"Value\",\n    rows = [:AVISIT => \"VisitDay\", :AVALC => \"Assessment\"],\n    cols = :TRTP => \"Xanomeline\",\n    summary = [\n        length => \"N\",\n    ]\n)\n```\n\n\n## TABLE 8\n<details>\n<summary>Data Preparation - Table 8</summary>\n\n\n\n```{julia}\nadsl_l = @chain adsl_orig begin\n    @rtransform :POP = if :COMP24FL == \"Y\" \"COMP24FL\" else missing end\n    @rtransform :POP = if :SAFFL == \"Y\" \"SAFFL\" else :POP end\n\n    @rsubset !ismissing(:POP)\n    @select :POP :USUBJID :TRT01P :AVGDD :CUMDOSE\n\n    @transform :TRT01P = categorical(:TRT01P,\n        levels = [\"Placebo\", \"Xanomeline Low Dose\", \"Xanomeline High Dose\"],\n        ordered = true)\n    @transform :TRT01P = recode(:TRT01P,\n        \"Xanomeline Low Dose\" => \"Xanomeline Low Dose\",\n        \"Xanomeline High Dose\" => \"Xanomeline High Dose\")\n    @rtransform :POP = if :POP == \"COMP24FL\"\n    elseif :POP == \"SAFFL\"\n    else\n        :POP\n    end\nend\n```\n\n</details>\n<details>\n<summary>Data wrangling</summary>\n\n```{julia}\nfunction summary_stats(col)\n    (\n        count(!ismissing, col) => \"N\",\n        mean(skipmissing(col)) => \"Mean\",\n        std(skipmissing(col)) => \"SD\",\n        median(skipmissing(col)) => \"Median\",\n        minimum(skipmissing(col)) => \"Min\",\n        maximum(skipmissing(col)) => \"Max\",\n    )\nend\n\n```\n\n</details>\n<details>\n<summary>Data wrangling</summary>\n\n```{julia}\npop_labels = Dict(\n    \"COMP24FL\" => \"**Completers at Week 24**<br>\",\n    \"SAFFL\" => \"**Safety Population**<br><small>Includes completers and early terminators</small>\"\n)\n\n```\n\n</details>\n\n\n```{julia}\n#| echo: false\n\ntbls = map(unique(adsl_l.POP)) do pop_level\n    df = @chain adsl_l begin\n        @rsubset :POP == pop_level\n    end\n\n    table_one(\n        df,\n        [\n            :AVGDD => summary_stats => \"Average daily dose (mg)\",\n            :CUMDOSE => summary_stats => \"Cumulative dose at end of study\"\n        ],\n        groupby = [:TRT01P => \"Treatment\"],\n        show_n = true,\n        show_pvalues = false,\n        total_name = \"Total\"\n    )\nend\n\n# Merge the tables similar to `tbl_merge`\ntbl_exposure = vcat(tbls...)\ndisplay(tbl_exposure[1])\n```\n\n\n## TABLE 9\n<details>\n<summary>Data Preparation - Table 9</summary>\n\n\n\n```{julia}\nadsl = @chain adsl_orig begin\n    @rsubset :SAFFL == \"Y\"\n    @rtransform :TRTA = replace(:TRT01A,\n        \"Xanomeline Low Dose\" => \"Low Dose\",\n        \"Xanomeline High Dose\" => \"High Dose\",\n        \"Placebo\" => \"Placebo\")\n    @transform :TRTA = categorical(:TRTA, levels=[\"Placebo\", \"Low Dose\", \"High Dose\"], ordered=true)\nend\n```\n\n</details>\n<details>\n<summary>Data wrangling</summary>\n\n```{julia}\nadae = @chain adae_orig begin\n    @rsubset :SAFFL == \"Y\" && :TRTEMFL == \"Y\"\n    @rtransform :TRTA = replace(:TRTA,\n        \"Xanomeline Low Dose\" => \"Low Dose\",\n        \"Xanomeline High Dose\" => \"High Dose\",\n        \"Placebo\" => \"Placebo\")\n    @transform :TRTA = categorical(:TRTA, levels=[\"Placebo\", \"Low Dose\", \"High Dose\"], ordered=true)\n    @rtransform :AETERM = titlecase(strip(:AETERM))\n    @rtransform :AEBODSYS = titlecase(strip(:AEBODSYS))\nend\n```\n\n</details>\n<details>\n<summary>Data wrangling</summary>\n\n```{julia}\nfunction complete_ae_data(df_adae, df_adsl; id_col=:USUBJID, soc_col=:AEBODSYS, ae_col=:AETERM, strata_col=:TRTA)\n    all_ids = unique(df_adsl[:, id_col])\n    levels_strata = levels(df_adsl[:, strata_col])\n    levels_soc = unique(df_adae[:, soc_col])\n    levels_ae = unique(df_adae[:, ae_col])\n\n    # Generate dummy combinations\n    rows = DataFrame()\n    for id in all_ids, soc in levels_soc, ae in levels_ae, trt in levels_strata\n        push!(rows, (USUBJID=id, AEBODSYS=soc, AETERM=ae, TRTA=trt))\n    end\n\n    # Mark those that are present in real ADAE\n    real_ids = select(df_adae, id_col, soc_col, ae_col, strata_col)\n    real_ids = unique(real_ids)\n    rename!(real_ids, Dict(id_col => :USUBJID, soc_col => :AEBODSYS, ae_col => :AETERM, strata_col => :TRTA))\n\n    merged = leftjoin(rows, real_ids, on=[:USUBJID, :AEBODSYS, :AETERM, :TRTA], indicator=:present)\n    merged.present = coalesce.(merged.present .== \"both\", false)\n    return merged\nend\n\nae_cmpl = complete_ae_data(adae, adsl)\n```\n\n</details>\n<details>\n<summary>Data wrangling</summary>\n\n```{julia}\nae_any = @chain adae begin\n    @rtransform :AEBODSYS = \"Any Body System\"\n    @rtransform :AETERM = \"Any Body System\"\nend\n\nae_cmpl_any = complete_ae_data(ae_any, adsl)\nae_all = vcat(ae_cmpl, ae_cmpl_any)\n```\n\n</details>\n<details>\n<summary>Data wrangling</summary>\n\n```{julia}\nae_long = @chain ae_all begin\n    @rtransform :SOC = :AEBODSYS\n    @rtransform :AE = :AETERM\n    @rtransform :AE_Label = ifelse(:AEBODSYS == \"Any Body System\", \"All \" * :SOC, :AE)\n    @rtransform :PRESENT = :present\n    unique(:USUBJID)\n\nend\n```\n\n</details>\n\n\n\n```{julia}\n#| echo: false\n\nsummary = table_one(\n    ae_long,\n    :AEBODSYS => \"All any body system\",\n    groupby = [:TRTA => \"Xanomeline\", :AETERM => \"\"],\n    show_n = true,\n    show_pvalues = true\n)\n```\n\n\n## TABLE 10\n<details>\n<summary>Data Preparation - Table 10</summary>\n\n\n\n\n```{julia}\nadlbc = @chain readstat(joinpath(path, \"adlbc.xpt\")) DataFrame begin\n    @rsubset :SAFFL == \"Y\" && (:AVISITN != 99 || (:AVISITN == 99 && :AENTMTFL == \"Y\"))\nend\n\nadlbh = @chain readstat(joinpath(path, \"adlbh.xpt\")) DataFrame begin\n    @rsubset :SAFFL == \"Y\" && (:AVISITN != 99 || (:AVISITN == 99 && :AENTMTFL == \"Y\"))\n    @rsubset !in(:PARAM, [\"Anisocytes\", \"Poikilocytes\", \"Microcytes\", \"Macrocytes\", \"Polychromasia\"])\nend\n```\n\n</details>\n<details>\n<summary>Data wrangling</summary>\n\n```{julia}\nadlbc2 = insertcols(copy(adlbc), :ORIG => fill(\"CHEMISTRY\", nrow(adlbc)))\nadlbh2 = insertcols(copy(adlbh), :ORIG => fill(\"HEMATOLOGY\", nrow(adlbh)))\n\nadlb = vcat(adlbc2, adlbh2)\n\nadlb = @chain adlb begin\n    @select :ORIG :PARCAT1 :PARAM :PARAMCD :USUBJID :TRTA :AVISIT :AVISITN :AVAL :CHG\n    @transform :TRTA = recode(categorical(:TRTA),\n        \"Xanomeline Low Dose\" => \"Low Dose\",\n        \"Xanomeline High Dose\" => \"High Dose\"\n    )\n    @transform :TRTA = categorical(:TRTA, levels = [\"Placebo\", \"Low Dose\", \"High Dose\"], ordered = true)\n    @transform :AVISIT = strip.(String.(:AVISIT))  \nend\n```\n\n</details>\n<details>\n<summary>Data wrangling</summary>\n\n```{julia}\nadlb_l = stack(adlb, [:AVAL, :CHG], variable_name = :VARIABLE, value_name = :VALUE)\n```\n\n</details>\n<details>\n<summary>Data wrangling</summary>\n\n```{julia}\ngroup_vars = [:ORIG, :PARCAT1, :PARAM, :PARAMCD, :AVISIT, :AVISITN, :VARIABLE]\nadlb_n = groupby(adlb_l, group_vars)\n```\n\n</details>\n<details>\n<summary>Data wrangling</summary>\n\n```{julia}\nfunction custom_lab_summary(x)\n    data = collect(skipmissing(x))\n    if isempty(data)\n        return (\n            0 => \"n\",\n            missing => \"Mean\",\n            missing => \"SD\",\n            missing => \"Median\",\n            missing => \"Min\",\n            missing => \"Max\"\n        )\n    else\n        return (\n            length(data) => \"n\",\n            mean(data) => \"Mean\",\n            std(data) => \"SD\",\n            median(data) => \"Median\",\n            minimum(data) => \"Min\",\n            maximum(data) => \"Max\"\n        )\n    end\nend\n\n```\n\n</details>\n<details>\n<summary>Data wrangling</summary>\n\n```{julia}\ngroup_vars = [:PARAM, :AVISIT, :TRTA, :VARIABLE]\n\nadlb_summary = @chain adlb_l begin\n    groupby(group_vars)\n    @combine begin\n        :N = count(!ismissing, :VALUE)\n        :Mean = mean(skipmissing(:VALUE))\n        :SD = std(skipmissing(:VALUE))\n    end\nend\n```\n\n</details>\n<details>\n<summary>Data wrangling</summary>\n\n```{julia}\nadlb_summary_long = stack(\n    adlb_summary,\n    [:N, :Mean, :SD],\n    variable_name = :SummaryType,\n    value_name = :VALUE\n)\n```\n\n</details>\n<details>\n<summary>Data wrangling</summary>\n\n```{julia}\nadlb_summary_long1 = @chain adlb_summary_long begin\n    @transform :VALUE = replace(:VALUE, NaN=>missing)\n    dropmissing\nend\n```\n\n</details>\n<details>\n<summary>Data wrangling</summary>\n\n\n```{julia}\nadlb_summary_long2 = combine(groupby(adlb_summary_long1,[:VARIABLE])) do df\n    if all(x -> x == \"CHG\", df.VARIABLE)\n        df = @rsubset df :SummaryType == \"Mean\"\n    else \n        df = df\n    end\nend\n```\n\n</details>\n<details>\n<summary>Data wrangling</summary>\n\n```{julia}\nadlb_summary_long3 = @chain adlb_summary_long2 begin\n   @rtransform :SummaryType = (:VARIABLE == \"CHG\") ? \"CHG\" : :SummaryType\n   @rtransform :VARIABLE = (:VARIABLE == \"CHG\") ? \"AVAL\" : :VARIABLE\nend\n```\n\n</details>\n\n\n```{julia}\n#| echo: false\n\ntbl_summary = listingtable(\n    adlb_summary_long3,\n    :VALUE,\n    rows = [:PARAM => \"\", :AVISIT => \"\"],\n    cols = [:TRTA => \"Treatment\", :SummaryType => \"\"]\n)\n```\n\n## TABLE 11\n<details>\n<summary>Data Preparation - Table 11</summary>\n\n\n\n```{julia}\n\nadlbc2 = insertcols(copy(adlbc), :ORIG => fill(\"CHEMISTRY\", nrow(adlbc)))\nadlbh2 = insertcols(copy(adlbh), :ORIG => fill(\"HEMATOLOGY\", nrow(adlbh)))\nadlb = vcat(adlbc2, adlbh2)\n\nadlb = @chain adlb begin\n    @rsubset coalesce(:SAFFL == \"Y\", false) &&\n             coalesce(:ANL01FL == \"Y\", false) &&\n             coalesce(:AVISITN != 99, false) &&\n             !ismissing(:PARAM) &&\n             !ismissing(:TRTA) &&\n             !ismissing(:LBNRIND) &&\n             :LBNRIND in [\"LOW\", \"NORMAL\", \"HIGH\"] &&\n             (!ismissing(:PARAMCD) && !coalesce(startswith(:PARAMCD, \"_\"), false))\n    @select :ORIG :PARCAT1 :PARAM :PARAMCD :USUBJID :TRTA :AVISIT :AVISITN :AVAL :CHG :LBNRIND\n    @transform :TRTA = recode(categorical(:TRTA),\n        \"Xanomeline Low Dose\" => \"Low Dose\",\n        \"Xanomeline High Dose\" => \"High Dose\"\n    )\n    @transform :TRTA = categorical(:TRTA, levels = [\"Placebo\", \"Low Dose\", \"High Dose\"], ordered = true)\n    @transform :LBNRIND = recode(categorical(:LBNRIND),\n                    \"LOW\" => \"Low\",\n                    \"NORMAL\" => \"Normal\",\n                    \"HIGH\" => \"High\")\n    @rtransform :PARAM = replace(:PARAM, r\"\\(.*?\\)\" => \"\") |> strip\nend\n```\n\n</details>\n<details>\n<summary>Data wrangling</summary>\n\n```{julia}\nadlb_cross = @chain adlb begin\n    groupby([:ORIG, :PARAM, :TRTA, :LBNRIND])\n    @combine :N = length(:LBNRIND)\n    unstack(:LBNRIND, :N, fill=0)\n    @rtransform :Total = coalesce(:Low, 0) + coalesce(:Normal, 0) + coalesce(:High, 0)\n    @rtransform :LowP = round(100 * coalesce(:Low, 0) / :Total, digits=1)\n    @rtransform :NormalP = round(100 * coalesce(:Normal, 0) / :Total, digits=1)\n    @rtransform :HighP = round(100 * coalesce(:High, 0) / :Total, digits=1)\nend\n```\n\n</details>\n<details>\n<summary>Data wrangling</summary>\n\n```{julia}\nadlb_summary = @chain adlb begin\n    groupby([:ORIG, :TRTA, :LBNRIND, :PARAM])\n    @combine :N = length(:LBNRIND)\n    unstack(:LBNRIND, :N, fill=0)\n    @rtransform :Total = coalesce(:Low, 0) + coalesce(:Normal, 0) + coalesce(:High, 0)\nend\n```\n\n</details>\n<details>\n<summary>Data wrangling</summary>\n\n```{julia}\ntbl_final = @chain adlb_summary begin\n    select(:ORIG, :TRTA, :PARAM, :Low, :Normal, :High, :Total)\n    stack([:Low, :Normal, :High], variable_name = :Category, value_name = :Count)\n    @rtransform :Percent = if :Total > 0\n        string(:Count, \" (\", round(100 * :Count / :Total, digits=1), \"%)\")\n    else\n        \"0 (0%)\"\n    end\nend\n```\n\n</details>\n\n\n```{julia}\n#| echo: false\n\ntbl4 = listingtable(\n    tbl_final,\n    :Percent,\n    rows = [:ORIG => \"\", :PARAM => \"\"],\n    cols = [:TRTA => \"Treatment\", :Category => \"Lab Status\"]\n)\n```\n\n\n\n## TABLE 12\n<details>\n<summary>Data Preparation - Table 12</summary>\n\n\n```{julia}\nadlbc2 = insertcols(copy(adlbc), :ORIG => fill(\"CHEMISTRY\", nrow(adlbc)))\nadlbh2 = insertcols(copy(adlbh), :ORIG => fill(\"HEMATOLOGY\", nrow(adlbh)))\nadlb = vcat(adlbc2, adlbh2)\n\n```\n\n</details>\n<details>\n<summary>Data wrangling</summary>\n\n```{julia}\nlab_keep = [\"Alanine Aminotransferase\", \"Albumin\", \"Basophils\", \"Eosinophils\"]\n\nadlb1 = @chain adlb begin\n    @transform :PARAM = strip.(replace.(string.(:PARAM), r\"\\(.*?\\)\" => \"\"))\n    @rsubset :SAFFL == \"Y\" &&\n             :AVISITN != 99 &&\n             strip(:VISIT) != \"SCREENING 1\" &&\n             !ismissing(:VISIT) && !ismissing(:TRTA) &&\n             !ismissing(:BNRIND) && !ismissing(:ANRIND) &&\n             !ismissing(:PARAM) && !startswith(:PARAMCD, \"_\") &&\n             :PARAM in lab_keep\n\n\n    @transform :TRTP = recode(categorical(:TRTP),\n        \"Placebo\" => \"Placebo\",\n        \"Xanomeline Low Dose\" => \"Low Dose\",\n        \"Xanomeline High Dose\" => \"High Dose\"\n    )\n    @transform :TRTP = categorical(:TRTP, levels=[\"Placebo\", \"Low Dose\", \"High Dose\"], ordered=true)\n    @transform :ANRIND = recode(categorical(:ANRIND),\n        \"N\" => \"Normal\", \"H\" => \"High\")\n    @transform :BNRIND = recode(categorical(:BNRIND),\n        \"N\" => \"Normal\", \"H\" => \"High\")\n    @rtransform :PARAM = replace(:PARAM, r\"\\(.*?\\)\" => \"\") |> strip\nend\n```\n\n</details>\n<details>\n<summary>Data wrangling</summary>\n\n```{julia}\ngroup_vars = [:ORIG, :PARAM, :PARAMCD, :TRTP, :VISIT]\nadlb_groups = groupby(adlb1, group_vars)\n```\n\n</details>\n<details>\n<summary>Data wrangling</summary>\n\n```{julia}\nfunction shift_table(df)\n    tbl = @chain df begin\n        groupby([:BNRIND, :ANRIND])\n        @combine :Count = length(:BNRIND)\n        unstack(:ANRIND, :Count, fill=0, allowmissing=true)\n        @transform :RowLabel = string(:BNRIND)\n    end\n    return select(tbl, :RowLabel, Not(:BNRIND))\nend\n```\n\n</details>\n<details>\n<summary>Data wrangling</summary>\n\n\n```{julia}\nusing Tables\n\nshifts_df = combine(adlb_groups) do sdf\n    tbl = shift_table(sdf)\n    (; ORIG = [first(sdf.ORIG)],\n       PARAM = [first(sdf.PARAM)],\n       PARAMCD = [first(sdf.PARAMCD)],\n       TRTP = [first(sdf.TRTP)],\n       VISIT = [first(sdf.VISIT)],\n       table = [tbl]) \nend\n```\n\n</details>\n<details>\n<summary>Data wrangling</summary>\n\n```{julia}\nrows = eachrow(shifts_df)\ntables_list = map(rows) do row\n    inner_tbl = deepcopy(row.table)\n    insertcols!(inner_tbl, 1,\n        :ORIG => row.ORIG,\n        :PARAM => row.PARAM,\n        :PARAMCD => row.PARAMCD,\n        :TRTP => row.TRTP,\n        :VISIT => row.VISIT\n    )\n    inner_tbl\nend\nshifts_long = vcat(tables_list...; cols = :union)\n```\n\n</details>\n<details>\n<summary>Data wrangling</summary>\n\n\n\n```{julia}\ntbl_final = @chain shifts_long begin\n    stack(Not([:ORIG, :PARAM, :PARAMCD, :TRTP, :VISIT, :RowLabel]),\n          variable_name=:ShiftTo, value_name=:Count)\n    @rtransform :Percent = ismissing(:Count) ? \"0 (0%)\" :\n                        (:Count == 0 ? \"0 (0%)\" :\n                        string(:Count, \" (\", round(100 * :Count / sum(skipmissing(:Count)), digits=1), \"%)\"))\n    select(:ORIG, :PARAM, :TRTP, :VISIT, :RowLabel, :ShiftTo, :Percent)\nend\n```\n\n</details>\n<details>\n<summary>Data wrangling</summary>\n\n```{julia}\ntbl_final_cleaned = @chain shifts_long begin\n    stack(Not([:ORIG, :PARAM, :PARAMCD, :TRTP, :VISIT, :RowLabel]),\n          variable_name = :ShiftTo, value_name = :Count)\n    @rsubset(:ShiftTo in [\"High\", \"Normal\"])\n    @rtransform :Percent = ismissing(:Count) ? \"0 (0%)\" :\n        (:Count == 0 ? \"0 (0%)\" :\n        string(:Count, \" (\", round(100 * :Count / sum(skipmissing(:Count)), digits = 1), \"%)\"))\n    @select :ORIG :PARAM :TRTP :VISIT :ShiftTo :Percent\nend\n```\n\n</details>\n<details>\n<summary>Data wrangling</summary>\n\n```{julia}\ntbl_f = @chain tbl_final_cleaned begin\n    groupby([:ORIG, :PARAM, :TRTP, :VISIT, :ShiftTo])\n    combine(_) do sdf\n        sdf[1, :] \n    end\nend\n```\n\n</details>\n\n\n```{julia}\n#| echo: false\n\ntbl5 = listingtable(\n    tbl_f,\n    :Percent,\n    rows = [:ORIG => \"\", :PARAM => \"\", :VISIT => \"\"],\n    rowgaps = [i => 6.0 for i = 1:40],\n    cols = [:TRTP => \"Treatment\", :ShiftTo => \"\"]\n)\n```\n\n","srcMarkdownNoYaml":"\n\n**Reference:** This article was used as a reference — [CDISC Pilot NCA Analysis](https://agstn.github.io/CPR_gtsummary/CPR_gtsummary.html)\n\n\n\n<details>\n<summary> Package Imports and Setup</summary>\n\n\n## Load Packages\n```{julia}\nusing DataFrames\nusing CategoricalArrays\nusing DataFramesMeta\nusing ReadStatTables\nusing SummaryTables\nusing Printf\nusing HypothesisTests\nusing ReadStat\nusing StatsModels, StatsPlots, Statistics\n\ninclude(\"con-fun.jl\")\n```\n\n</details>\n<details>\n<summary>Data Loading</summary>\n\n\n## Read the datasets\n\n```{julia}\npath = joinpath(@__DIR__, \"..\", \"Datasets\") |> normpath\npc = @chain readstat(joinpath(path, \"pc.xpt\")) DataFrame convert_blanks_to_missing\nex = @chain readstat(joinpath(path, \"ex.xpt\")) DataFrame convert_blanks_to_missing\nvs = @chain readstat(joinpath(path, \"vs.xpt\")) DataFrame convert_blanks_to_missing\nlb = @chain readstat(joinpath(path, \"lb.xpt\")) DataFrame convert_blanks_to_missing\nadsl = @chain readstat(joinpath(path, \"adsl.xpt\")) DataFrame convert_blanks_to_missing\nadsl_orig = @chain readstat(joinpath(path, \"adsl_orig.xpt\")) DataFrame convert_blanks_to_missing\nadqsadas_orig = @chain readstat(joinpath(path, \"adqsadas_orig.xpt\")) DataFrame convert_blanks_to_missing\nadqscibc_orig = @chain readstat(joinpath(path, \"adqscibc_orig.xpt\")) DataFrame convert_blanks_to_missing\nadae_orig = @chain readstat(joinpath(path, \"adae_orig.xpt\")) DataFrame convert_blanks_to_missing\nadlbh = @chain readstat(joinpath(path, \"adlbh.xpt\")) DataFrame convert_blanks_to_missing\nadlbc = @chain readstat(joinpath(path, \"adlbc.xpt\")) DataFrame convert_blanks_to_missing\nadlbh_orig = @chain readstat(joinpath(path, \"adlbh_orig.xpt\")) DataFrame convert_blanks_to_missing\nadlbc_orig = @chain readstat(joinpath(path, \"adlbc_orig.xpt\")) DataFrame convert_blanks_to_missing\nadlbhy_orig = @chain readstat(joinpath(path, \"adlbhy_orig.xpt\")) DataFrame convert_blanks_to_missing\n\n```\n\n## TABLE 1\n\n</details>\n<details>\n<summary>Data Preparation - Table 1</summary>\n\n\n```{julia}\nadsl_prep = @chain adsl_orig begin\n    @transform :TRT01P = categorical(:TRT01P,\n        levels = [\"Placebo\", \"Xanomeline Low Dose\", \"Xanomeline High Dose\"],\n        ordered = true)\n    @transform :TRT01P = recode(:TRT01P,\n        \"Xanomeline Low Dose\" => \"Low Dose\",\n        \"Xanomeline High Dose\" => \"High Dose\")\n    \n    @select :USUBJID :TRT01P :ITTFL :SAFFL :EFFFL :COMP24FL :DCDECOD \n\nend\n```\n\n</details>\n\n\n```{julia}\n#| echo: false\ntbl = table_one(\n    adsl_prep,\n    [:ITTFL => \"INTENT-TO-TREAT\", :SAFFL => \"SAFETY\", :EFFFL => \"EFFICACY\", :COMP24FL => \"COMPLETE WEEK 24\",:DCDECOD => \"Complete Study\" ],\n    groupby = :TRT01P => \"XANOMELINE\",\n    show_pvalues = true,\n    show_n = true\n)\n```\n\n## TABLE 2\n\n\n<details>\n<summary>Data Preparation - Table 2</summary>\n\n\n```{julia}\nadsl_prep = @chain adsl_orig begin\n    @transform :TRT01P = categorical(:TRT01P,\n        levels = [\"Placebo\", \"Xanomeline Low Dose\", \"Xanomeline High Dose\"],\n        ordered = true)\n    @transform :TRT01P = recode(:TRT01P,\n        \"Xanomeline Low Dose\" => \"Low Dose\",\n        \"Xanomeline High Dose\" => \"High Dose\")\n    \n    @rtransform :COMP24FL = ifelse(:COMP24FL == \"Y\", \n        \"Completed Week 24\", \n        ifelse(:COMP24FL == \"N\", \"Early Termination (prior to Week 24)\", missing))\n\n    @rtransform :DCDECOD = ifelse(:COMP24FL == \"Completed Week 24\" && :DCDECOD != \"Complete\",\n        \"Completed\", :DCDECOD)\nend\n```\n\n</details>\n<details>\n<summary>Data wrangling</summary>\n\n```{julia}\ndcdecod_map = Dict(\n    \"Withdrawal By Subject\" => \"Subject decided to withdraw\",\n    \"Study Terminated By Sponsor\" => \"Sponsor decision\",\n    \"Physician Decision\" => \"Physician decided to withdraw subject\",\n    \"Protocol Violation\" => missing\n)\n\nadsl = @chain adsl_orig begin\n    @rtransform :DCDECOD = get(dcdecod_map, titlecase(strip(:DCDECOD)), titlecase(strip(:DCDECOD)))\nend\n```\n\n</details>\n<details>\n<summary>Data wrangling</summary>\n\n\n```{julia}\nallowed_levels = [\n    \"Adverse Event\",\n    \"Death\",\n    \"Lack Of Efficacy\",\n    \"Lost To Follow-Up\",\n    \"Subject decided to withdraw\"\n]\n\nadsl = @chain adsl begin\n    @rtransform :DCDECOD = get(\n        Dict(\n            \"Adverse Event\" => \"Adverse Event\",\n            \"Death\" => \"Death\",\n            \"Lack Of Efficacy\" => \"Lack Of Efficacy\",\n            \"Lost To Follow-Up\" => \"Lost To Follow-Up\",\n            \"Subject decided to withdraw\" => \"Subject decided to withdraw\"\n        ),\n        :DCDECOD,\n        missing\n    )\nend\n\nadsl.DCDECOD = categorical(adsl.DCDECOD, levels=allowed_levels, ordered=true)\n```\n\n\n</details>\n<details>\n<summary>Data wrangling</summary>\n\n\n```{julia}\np_loefl = @chain adsl begin\n    @rtransform :loefl = if ismissing(:DCDECOD)\n        0\n    else\n        :DCDECOD == \"Lack Of Efficacy\" ? 1 : 0\n    end\n    groupby(:TRT01P)\n    combine(_, :loefl => sum => :count)\nend\n```\n\n</details>\n\n\n```{julia}\n#| echo: false\ntbl1 = table_one(\n    adsl,\n    [:COMP24FL => \"Completion Status\",\n     :DCDECOD => \"Reason for Early Termination (prior to Week 24)\"],\n    groupby = :TRT01P => \"XANOMELINE\",\n    show_pvalues = true,\n    show_n = true\n)\n```\n\n\n## TABLE 3\n\n<details>\n<summary>Data Preparation - Table 3</summary>\n\n\n```{julia}\nadsl_l = @chain adsl_orig begin\n    @select :USUBJID :SITEGR1 :SITEID :TRT01P :ITTFL :EFFFL :COMP24FL\n    @transform :SITE = string(:SITEGR1, \" — \", :SITEID)\n    stack(Not([:USUBJID, :SITEGR1, :SITEID, :TRT01P, :SITE]), variable_name = :DESC, value_name = :YN)\n    @rtransform :YN = :YN == \"Y\" ? 1 : 0\n    @rsubset :YN == 1\n    @rtransform :DESC = ifelse(:DESC == \"ITTFL\", \"ITT\",\n                         :DESC == \"EFFFL\" ? \"Eff\" :\n                         :DESC == \"COMP24FL\" ? \"Com\" : missing)\nend\n```\n\n</details>\n<details>\n<summary>Data wrangling</summary>\n\n\n\n\n```{julia}\n\nadsl_l = @chain adsl_orig begin\n    @select :SUBJID :SITEID :TRT01P :ITTFL :EFFFL :COMP24FL\n    @rtransform :SITE = string(:SITEID)\n    stack([:ITTFL, :EFFFL, :COMP24FL], \n          [:SUBJID, :SITEID, :TRT01P, :SITE], \n          variable_name = :DESC, value_name = :YN)\n\n    @rtransform :YN = :YN == \"Y\" ? 1 : 0\n    @rsubset :YN == 1\n\n    @rtransform :DESC = if :DESC == \"ITTFL\"\n        \"ITT\"\n    elseif :DESC == \"EFFFL\"\n        \"Eff\"\n    elseif :DESC == \"COMP24FL\"\n        \"Com\"\n    else\n        missing\n    end\n\n    @transform :DESC = categorical(:DESC, levels = [\"ITT\", \"Eff\", \"Com\"])\n    @transform :TRT01P = categorical(:TRT01P,\n        levels = [\"Placebo\", \"Xanomeline Low Dose\", \"Xanomeline High Dose\"],\n        ordered = true)\n    @transform :TRT01P = recode(:TRT01P,\n        \"Xanomeline Low Dose\" => \"Low Dose\",\n        \"Xanomeline High Dose\" => \"High Dose\")\n    \nend\n```\n\n</details>\n\n\n```{julia}\n#| echo: false\ntbl2 = table_one(\n    adsl_l,\n    :SITEID => \"Pooled-SITEID\",\n    groupby = [:TRT01P => \"Dose\", :DESC => \"Desc\"],\n    show_n = true\n)\n```\n\n## TABLE 4\n<details>\n<summary>Data Preparation - Table 4</summary>\n\n\n```{julia}\nadsl_demo = @chain adsl_orig begin\n    @transform :TRT01P = categorical(:TRT01P,\n        levels = [\"Placebo\", \"Xanomeline Low Dose\", \"Xanomeline High Dose\"],\n        ordered = true)\n    @transform :TRT01P = recode(:TRT01P,\n        \"Xanomeline Low Dose\" => \"Low Dose\",\n        \"Xanomeline High Dose\" => \"High Dose\")\n    @transform :SEX = recode(categorical(:SEX), \"F\" => \"Female\", \"M\" => \"Male\")\n    @transform :SEX = categorical(:SEX, levels = [\"Female\", \"Male\"], ordered = true)\n    @transform :AGEGR1 = recode(categorical(:AGEGR1),\n        \"<65\" => \"<65 yrs\",\n        \"65-80\" => \"65-80 yrs\",\n        \">80\" => \">80 yrs\")\n    @transform :RACE = titlecase.(strip.(:RACE))\n    @transform :BMIBLGR1 = categorical(:BMIBLGR1,\n        levels = [\"<25\", \"25-<30\", \">=30\"], ordered = true)\n    @transform :DURDSGR1 = recode(categorical(:DURDSGR1),\n        \"<12 Months\" => \"<12 months\",\n        \">=12 Months\" => \">=12 months\")\nend\n```\n\n</details>\n\n\n```{julia}\n#| echo: false\n\nfunction custom_analysis(column)\n    (\n        length(column) => \"n\",\n        mean(column) => \"Mean\",\n        std(column) => \"SD\",\n        median(column) => \"Median\",\n        minimum(column) => \"Min\",\n        maximum(column) => \"Max\",\n    )\nend\ntbl_demo = table_one(\n    adsl_demo,\n    [\n        :AGE => custom_analysis => \"Age (y)\",\n        :AGEGR1 => \"\",\n        :SEX => \"Sex\",\n        :RACE => \"Race (Origin)\",\n        :MMSETOT => custom_analysis => \"MMSE\",\n        :DURDIS => custom_analysis => \"Duration of disease\",\n        :DURDSGR1 => \"\",\n        :BMIBL => \"Baseline BMI\",\n        :BMIBLGR1 => \"\"\n    ];\n    groupby = :TRT01P => \"Treatment Arm\",\n    show_total = true,\n    total_name = \"Overall\",\n    show_pvalues = true,\n    show_n = true\n)\n```\n\n\n\n\n## TABLE 5\n\n<details>\n<summary>Data Preparation - Table 5</summary>\n\n\n```{julia}\nadqsadas = @chain adqsadas_orig begin\n    @rsubset :EFFFL == \"Y\" && :ITTFL == \"Y\" && :PARAMCD == \"ACTOT\" && :ANL01FL == \"Y\"\n    @rsubset :AVISITN in (0, 24)\n    dropmissing(:CHG)\n    @transform :TRTP = recode(categorical(:TRTP),\n        \"Xanomeline Low Dose\" => \"Low Dose\",\n        \"Xanomeline High Dose\" => \"High Dose\"\n    )\n    @transform :TRTP = categorical(:TRTP, levels=[\"Placebo\", \"Low Dose\", \"High Dose\"], ordered=true)\nend\n```\n\n\n</details>\n\n\n```{julia}\n#| echo: false\n\ntbl_sum = table_one(\n    adqsadas,\n    [\n        :BASE => \"Baseline\",\n        :AVAL => \"Week 24\",\n        :CHG => \"Change from Baseline\"\n    ];\n    groupby = :TRTP => \"Treatment Arm\",\n    show_total = true,\n    total_name = \"Overall\",\n    show_pvalues = true,\n    show_n = true,\n\n)\n```\n\n\n## TABLE 06\n\n<details>\n<summary>Data Preparation - Table 6</summary>\n\n\n\n```{julia}\nadqsadas_locf = @chain adqsadas_orig begin\n    @rsubset :EFFFL == \"Y\" && :ITTFL == \"Y\" && :PARAMCD == \"ACTOT\" && :ANL01FL == \"Y\"\n    @rsubset :AVISITN in (0, 8, 16, 24)\n    @select :USUBJID :TRTP :AVISIT :AVISITN :AVAL :BASE :CHG\n    @transform :SET = \"LOCF\"\nend\n```\n\n</details>\n<details>\n<summary>Data wrangling</summary>\n\n```{julia}\nadqsadas_win = @chain adqsadas_orig begin\n    @rsubset :EFFFL == \"Y\" && :ITTFL == \"Y\" && :PARAMCD == \"ACTOT\" && :ANL01FL == \"Y\"\n    @rsubset :AVISITN in (0, 8, 16, 24)\n    @rsubset :AVISITN != 0 && :DTYPE != \"LOCF\"\n    @select :USUBJID :TRTP :AVISIT :AVISITN :AVAL :BASE :CHG\n    @transform :SET = \"Windowed\"\nend\n```\n\n</details>\n<details>\n<summary>Data wrangling</summary>\n\n```{julia}\nadqsadas_l = @chain vcat(adqsadas_locf, adqsadas_win) begin\n    @rtransform :AVISIT_SET = if :AVISIT == \"Baseline\"\n        \"Baseline\"\n    else\n        string(:AVISIT, \" (\", :SET, \")\")\n    end\n\n    @transform :AVISIT_SET = categorical(:AVISIT_SET,\n        levels = [\"Baseline\", \n                  \"Week 8 (Windowed)\", \"Week 16 (Windowed)\", \"Week 24 (Windowed)\",\n                  \"Week 8 (LOCF)\", \"Week 16 (LOCF)\", \"Week 24 (LOCF)\"],\n        ordered = true)\n\n    @transform :TRTP = categorical(:TRTP,\n        levels = [\"Placebo\", \"Xanomeline Low Dose\", \"Xanomeline High Dose\"],\n        ordered = true)\n\n    @transform :TRTP = recode(:TRTP,\n        \"Xanomeline Low Dose\" => \"Low Dose\",\n        \"Xanomeline High Dose\" => \"High Dose\")\nend\n\n```\n\n</details>\n<details>\n<summary>Data wrangling</summary>\n\n```{julia}\naval_long = stack(adqsadas_l, [:AVAL, :BASE, :CHG], variable_name = :VAR, value_name = :AVAL_VAL)\naval_long = dropmissing(aval_long, :AVAL_VAL)\n\n```\n\n</details>\n<details>\n<summary>Data wrangling</summary>\n\n```{julia}\nfunction stats_summary(x)\n    NamedTuple{(:N, :Mean, :SD, :Median, :Min, :Max)}((\n        length(x),\n        mean(x),\n        std(x),\n        median(x),\n        minimum(x),\n        maximum(x)\n    ))\nend\n```\n\n</details>\n<details>\n<summary>Data wrangling</summary>\n\n```{julia}\nsummary_long = @chain aval_long begin\n    groupby([:AVISIT_SET, :TRTP, :VAR])\n    combine(:AVAL_VAL => stats_summary => AsTable)\nend\nnames(summary_long)\n\n```\n\n</details>\n<details>\n<summary>Data wrangling</summary>\n\n\n```{julia}\nstats = [\"N\", \"Mean\", \"SD\", \"Median\", \"Min\", \"Max\"]\nunstacked_stats = Dict()\nfor stat in stats\n    stat_col = Symbol(stat)\n    df = select(summary_long, [:AVISIT_SET, :TRTP, :VAR, stat_col])\n    wide = unstack(df, [:AVISIT_SET, :TRTP], :VAR, stat_col)\n    \n    # Create a dictionary for renaming\n    old_names = Symbol.(names(wide)[3:end])\n    new_names = [Symbol(\"$(n)_$stat\") for n in old_names]\n    rename_dict = Dict(zip(old_names, new_names))\n    \n    rename!(wide, rename_dict)\n    unstacked_stats[stat] = wide\nend\nwide_tbl = reduce((d1, d2) -> outerjoin(d1, d2, on=[:AVISIT_SET, :TRTP]), values(unstacked_stats))\n\n```\n\n</details>\n\n\n```{julia}\n#| echo: false\n\ntbl_demo1 = table_one(\n    wide_tbl,\n    [Symbol(col) => \"\" for col in names(wide_tbl) if col ∉ [\"AVISIT_SET\", \"TRTP\"]],\n    groupby = [:TRTP => \"Treatment\", :AVISIT_SET => \"Visit\"]\n)\n\n```\n\n## TABLE 7\n<details>\n<summary>Data Preparation - Table 7</summary>\n\n\n\n\n```{julia}\nadqscibc = @chain adqscibc_orig begin\n    @rsubset :EFFFL == \"Y\" && :ITTFL == \"Y\" && :AVISITN in (8, 16, 24) && :ANL01FL == \"Y\"\n    @select :USUBJID :TRTP :SITEGR1 :AVISIT :AVISITN :AVAL\n    @rtransform :AVALC = begin\n        val = string(:AVAL)\n        if val == \"1\"\n            \"Marked improvement\"\n        elseif val == \"2\"\n            \"Moderate improvement\"\n        elseif val == \"3\"\n            \"Minimal improvement\"\n        elseif val == \"4\"\n            \"No Change\"\n        elseif val == \"5\"\n            \"Minimal worsening\"\n        elseif val == \"6\"\n            \"Moderate worsening\"\n        elseif val == \"7\"\n            \"Marked worsening\"\n        else\n            missing\n        end\n    end\nend\n```\n\n</details>\n<details>\n<summary>Data wrangling</summary>\n\n```{julia}\naval_labels = Dict(\n    1 => \"Marked improvement\",\n    2 => \"Moderate improvement\",\n    3 => \"Minimal improvement\",\n    4 => \"No Change\",\n    5 => \"Minimal worsening\",\n    6 => \"Moderate worsening\",\n    7 => \"Marked worsening\"\n)\n\nlevels_order = [\n    \"Marked improvement\",\n    \"Moderate improvement\",\n    \"Minimal improvement\",\n    \"No Change\",\n    \"Minimal worsening\",\n    \"Moderate worsening\",\n    \"Marked worsening\"\n]\n\nadqscibc = @chain adqscibc begin\n    @rtransform :AVALC = get(aval_labels, :AVAL, missing)\n    @transform :AVALC = categorical(:AVALC, levels = levels_order, ordered = true)\n    \n    @transform :TRTP = recode(:TRTP,\n        \"Xanomeline Low Dose\" => \"Low Dose\",\n        \"Xanomeline High Dose\" => \"High Dose\")\n    \n    @transform :TRTP = categorical(:TRTP,\n        levels = [\"Placebo\", \"Low Dose\", \"High Dose\"])\n    \n    @transform :AVISIT = categorical(:AVISIT,\n        levels = [\"Week 8\", \"Week 16\", \"Week 24\"], ordered = true)\nend\n```\n\n</details>\n\n\n```{julia}\n#| echo: false\n\ntbl3 = summarytable(\n    adqscibc,\n    :AVAL => \"Value\",\n    rows = [:AVISIT => \"VisitDay\", :AVALC => \"Assessment\"],\n    cols = :TRTP => \"Xanomeline\",\n    summary = [\n        length => \"N\",\n    ]\n)\n```\n\n\n## TABLE 8\n<details>\n<summary>Data Preparation - Table 8</summary>\n\n\n\n```{julia}\nadsl_l = @chain adsl_orig begin\n    @rtransform :POP = if :COMP24FL == \"Y\" \"COMP24FL\" else missing end\n    @rtransform :POP = if :SAFFL == \"Y\" \"SAFFL\" else :POP end\n\n    @rsubset !ismissing(:POP)\n    @select :POP :USUBJID :TRT01P :AVGDD :CUMDOSE\n\n    @transform :TRT01P = categorical(:TRT01P,\n        levels = [\"Placebo\", \"Xanomeline Low Dose\", \"Xanomeline High Dose\"],\n        ordered = true)\n    @transform :TRT01P = recode(:TRT01P,\n        \"Xanomeline Low Dose\" => \"Xanomeline Low Dose\",\n        \"Xanomeline High Dose\" => \"Xanomeline High Dose\")\n    @rtransform :POP = if :POP == \"COMP24FL\"\n    elseif :POP == \"SAFFL\"\n    else\n        :POP\n    end\nend\n```\n\n</details>\n<details>\n<summary>Data wrangling</summary>\n\n```{julia}\nfunction summary_stats(col)\n    (\n        count(!ismissing, col) => \"N\",\n        mean(skipmissing(col)) => \"Mean\",\n        std(skipmissing(col)) => \"SD\",\n        median(skipmissing(col)) => \"Median\",\n        minimum(skipmissing(col)) => \"Min\",\n        maximum(skipmissing(col)) => \"Max\",\n    )\nend\n\n```\n\n</details>\n<details>\n<summary>Data wrangling</summary>\n\n```{julia}\npop_labels = Dict(\n    \"COMP24FL\" => \"**Completers at Week 24**<br>\",\n    \"SAFFL\" => \"**Safety Population**<br><small>Includes completers and early terminators</small>\"\n)\n\n```\n\n</details>\n\n\n```{julia}\n#| echo: false\n\ntbls = map(unique(adsl_l.POP)) do pop_level\n    df = @chain adsl_l begin\n        @rsubset :POP == pop_level\n    end\n\n    table_one(\n        df,\n        [\n            :AVGDD => summary_stats => \"Average daily dose (mg)\",\n            :CUMDOSE => summary_stats => \"Cumulative dose at end of study\"\n        ],\n        groupby = [:TRT01P => \"Treatment\"],\n        show_n = true,\n        show_pvalues = false,\n        total_name = \"Total\"\n    )\nend\n\n# Merge the tables similar to `tbl_merge`\ntbl_exposure = vcat(tbls...)\ndisplay(tbl_exposure[1])\n```\n\n\n## TABLE 9\n<details>\n<summary>Data Preparation - Table 9</summary>\n\n\n\n```{julia}\nadsl = @chain adsl_orig begin\n    @rsubset :SAFFL == \"Y\"\n    @rtransform :TRTA = replace(:TRT01A,\n        \"Xanomeline Low Dose\" => \"Low Dose\",\n        \"Xanomeline High Dose\" => \"High Dose\",\n        \"Placebo\" => \"Placebo\")\n    @transform :TRTA = categorical(:TRTA, levels=[\"Placebo\", \"Low Dose\", \"High Dose\"], ordered=true)\nend\n```\n\n</details>\n<details>\n<summary>Data wrangling</summary>\n\n```{julia}\nadae = @chain adae_orig begin\n    @rsubset :SAFFL == \"Y\" && :TRTEMFL == \"Y\"\n    @rtransform :TRTA = replace(:TRTA,\n        \"Xanomeline Low Dose\" => \"Low Dose\",\n        \"Xanomeline High Dose\" => \"High Dose\",\n        \"Placebo\" => \"Placebo\")\n    @transform :TRTA = categorical(:TRTA, levels=[\"Placebo\", \"Low Dose\", \"High Dose\"], ordered=true)\n    @rtransform :AETERM = titlecase(strip(:AETERM))\n    @rtransform :AEBODSYS = titlecase(strip(:AEBODSYS))\nend\n```\n\n</details>\n<details>\n<summary>Data wrangling</summary>\n\n```{julia}\nfunction complete_ae_data(df_adae, df_adsl; id_col=:USUBJID, soc_col=:AEBODSYS, ae_col=:AETERM, strata_col=:TRTA)\n    all_ids = unique(df_adsl[:, id_col])\n    levels_strata = levels(df_adsl[:, strata_col])\n    levels_soc = unique(df_adae[:, soc_col])\n    levels_ae = unique(df_adae[:, ae_col])\n\n    # Generate dummy combinations\n    rows = DataFrame()\n    for id in all_ids, soc in levels_soc, ae in levels_ae, trt in levels_strata\n        push!(rows, (USUBJID=id, AEBODSYS=soc, AETERM=ae, TRTA=trt))\n    end\n\n    # Mark those that are present in real ADAE\n    real_ids = select(df_adae, id_col, soc_col, ae_col, strata_col)\n    real_ids = unique(real_ids)\n    rename!(real_ids, Dict(id_col => :USUBJID, soc_col => :AEBODSYS, ae_col => :AETERM, strata_col => :TRTA))\n\n    merged = leftjoin(rows, real_ids, on=[:USUBJID, :AEBODSYS, :AETERM, :TRTA], indicator=:present)\n    merged.present = coalesce.(merged.present .== \"both\", false)\n    return merged\nend\n\nae_cmpl = complete_ae_data(adae, adsl)\n```\n\n</details>\n<details>\n<summary>Data wrangling</summary>\n\n```{julia}\nae_any = @chain adae begin\n    @rtransform :AEBODSYS = \"Any Body System\"\n    @rtransform :AETERM = \"Any Body System\"\nend\n\nae_cmpl_any = complete_ae_data(ae_any, adsl)\nae_all = vcat(ae_cmpl, ae_cmpl_any)\n```\n\n</details>\n<details>\n<summary>Data wrangling</summary>\n\n```{julia}\nae_long = @chain ae_all begin\n    @rtransform :SOC = :AEBODSYS\n    @rtransform :AE = :AETERM\n    @rtransform :AE_Label = ifelse(:AEBODSYS == \"Any Body System\", \"All \" * :SOC, :AE)\n    @rtransform :PRESENT = :present\n    unique(:USUBJID)\n\nend\n```\n\n</details>\n\n\n\n```{julia}\n#| echo: false\n\nsummary = table_one(\n    ae_long,\n    :AEBODSYS => \"All any body system\",\n    groupby = [:TRTA => \"Xanomeline\", :AETERM => \"\"],\n    show_n = true,\n    show_pvalues = true\n)\n```\n\n\n## TABLE 10\n<details>\n<summary>Data Preparation - Table 10</summary>\n\n\n\n\n```{julia}\nadlbc = @chain readstat(joinpath(path, \"adlbc.xpt\")) DataFrame begin\n    @rsubset :SAFFL == \"Y\" && (:AVISITN != 99 || (:AVISITN == 99 && :AENTMTFL == \"Y\"))\nend\n\nadlbh = @chain readstat(joinpath(path, \"adlbh.xpt\")) DataFrame begin\n    @rsubset :SAFFL == \"Y\" && (:AVISITN != 99 || (:AVISITN == 99 && :AENTMTFL == \"Y\"))\n    @rsubset !in(:PARAM, [\"Anisocytes\", \"Poikilocytes\", \"Microcytes\", \"Macrocytes\", \"Polychromasia\"])\nend\n```\n\n</details>\n<details>\n<summary>Data wrangling</summary>\n\n```{julia}\nadlbc2 = insertcols(copy(adlbc), :ORIG => fill(\"CHEMISTRY\", nrow(adlbc)))\nadlbh2 = insertcols(copy(adlbh), :ORIG => fill(\"HEMATOLOGY\", nrow(adlbh)))\n\nadlb = vcat(adlbc2, adlbh2)\n\nadlb = @chain adlb begin\n    @select :ORIG :PARCAT1 :PARAM :PARAMCD :USUBJID :TRTA :AVISIT :AVISITN :AVAL :CHG\n    @transform :TRTA = recode(categorical(:TRTA),\n        \"Xanomeline Low Dose\" => \"Low Dose\",\n        \"Xanomeline High Dose\" => \"High Dose\"\n    )\n    @transform :TRTA = categorical(:TRTA, levels = [\"Placebo\", \"Low Dose\", \"High Dose\"], ordered = true)\n    @transform :AVISIT = strip.(String.(:AVISIT))  \nend\n```\n\n</details>\n<details>\n<summary>Data wrangling</summary>\n\n```{julia}\nadlb_l = stack(adlb, [:AVAL, :CHG], variable_name = :VARIABLE, value_name = :VALUE)\n```\n\n</details>\n<details>\n<summary>Data wrangling</summary>\n\n```{julia}\ngroup_vars = [:ORIG, :PARCAT1, :PARAM, :PARAMCD, :AVISIT, :AVISITN, :VARIABLE]\nadlb_n = groupby(adlb_l, group_vars)\n```\n\n</details>\n<details>\n<summary>Data wrangling</summary>\n\n```{julia}\nfunction custom_lab_summary(x)\n    data = collect(skipmissing(x))\n    if isempty(data)\n        return (\n            0 => \"n\",\n            missing => \"Mean\",\n            missing => \"SD\",\n            missing => \"Median\",\n            missing => \"Min\",\n            missing => \"Max\"\n        )\n    else\n        return (\n            length(data) => \"n\",\n            mean(data) => \"Mean\",\n            std(data) => \"SD\",\n            median(data) => \"Median\",\n            minimum(data) => \"Min\",\n            maximum(data) => \"Max\"\n        )\n    end\nend\n\n```\n\n</details>\n<details>\n<summary>Data wrangling</summary>\n\n```{julia}\ngroup_vars = [:PARAM, :AVISIT, :TRTA, :VARIABLE]\n\nadlb_summary = @chain adlb_l begin\n    groupby(group_vars)\n    @combine begin\n        :N = count(!ismissing, :VALUE)\n        :Mean = mean(skipmissing(:VALUE))\n        :SD = std(skipmissing(:VALUE))\n    end\nend\n```\n\n</details>\n<details>\n<summary>Data wrangling</summary>\n\n```{julia}\nadlb_summary_long = stack(\n    adlb_summary,\n    [:N, :Mean, :SD],\n    variable_name = :SummaryType,\n    value_name = :VALUE\n)\n```\n\n</details>\n<details>\n<summary>Data wrangling</summary>\n\n```{julia}\nadlb_summary_long1 = @chain adlb_summary_long begin\n    @transform :VALUE = replace(:VALUE, NaN=>missing)\n    dropmissing\nend\n```\n\n</details>\n<details>\n<summary>Data wrangling</summary>\n\n\n```{julia}\nadlb_summary_long2 = combine(groupby(adlb_summary_long1,[:VARIABLE])) do df\n    if all(x -> x == \"CHG\", df.VARIABLE)\n        df = @rsubset df :SummaryType == \"Mean\"\n    else \n        df = df\n    end\nend\n```\n\n</details>\n<details>\n<summary>Data wrangling</summary>\n\n```{julia}\nadlb_summary_long3 = @chain adlb_summary_long2 begin\n   @rtransform :SummaryType = (:VARIABLE == \"CHG\") ? \"CHG\" : :SummaryType\n   @rtransform :VARIABLE = (:VARIABLE == \"CHG\") ? \"AVAL\" : :VARIABLE\nend\n```\n\n</details>\n\n\n```{julia}\n#| echo: false\n\ntbl_summary = listingtable(\n    adlb_summary_long3,\n    :VALUE,\n    rows = [:PARAM => \"\", :AVISIT => \"\"],\n    cols = [:TRTA => \"Treatment\", :SummaryType => \"\"]\n)\n```\n\n## TABLE 11\n<details>\n<summary>Data Preparation - Table 11</summary>\n\n\n\n```{julia}\n\nadlbc2 = insertcols(copy(adlbc), :ORIG => fill(\"CHEMISTRY\", nrow(adlbc)))\nadlbh2 = insertcols(copy(adlbh), :ORIG => fill(\"HEMATOLOGY\", nrow(adlbh)))\nadlb = vcat(adlbc2, adlbh2)\n\nadlb = @chain adlb begin\n    @rsubset coalesce(:SAFFL == \"Y\", false) &&\n             coalesce(:ANL01FL == \"Y\", false) &&\n             coalesce(:AVISITN != 99, false) &&\n             !ismissing(:PARAM) &&\n             !ismissing(:TRTA) &&\n             !ismissing(:LBNRIND) &&\n             :LBNRIND in [\"LOW\", \"NORMAL\", \"HIGH\"] &&\n             (!ismissing(:PARAMCD) && !coalesce(startswith(:PARAMCD, \"_\"), false))\n    @select :ORIG :PARCAT1 :PARAM :PARAMCD :USUBJID :TRTA :AVISIT :AVISITN :AVAL :CHG :LBNRIND\n    @transform :TRTA = recode(categorical(:TRTA),\n        \"Xanomeline Low Dose\" => \"Low Dose\",\n        \"Xanomeline High Dose\" => \"High Dose\"\n    )\n    @transform :TRTA = categorical(:TRTA, levels = [\"Placebo\", \"Low Dose\", \"High Dose\"], ordered = true)\n    @transform :LBNRIND = recode(categorical(:LBNRIND),\n                    \"LOW\" => \"Low\",\n                    \"NORMAL\" => \"Normal\",\n                    \"HIGH\" => \"High\")\n    @rtransform :PARAM = replace(:PARAM, r\"\\(.*?\\)\" => \"\") |> strip\nend\n```\n\n</details>\n<details>\n<summary>Data wrangling</summary>\n\n```{julia}\nadlb_cross = @chain adlb begin\n    groupby([:ORIG, :PARAM, :TRTA, :LBNRIND])\n    @combine :N = length(:LBNRIND)\n    unstack(:LBNRIND, :N, fill=0)\n    @rtransform :Total = coalesce(:Low, 0) + coalesce(:Normal, 0) + coalesce(:High, 0)\n    @rtransform :LowP = round(100 * coalesce(:Low, 0) / :Total, digits=1)\n    @rtransform :NormalP = round(100 * coalesce(:Normal, 0) / :Total, digits=1)\n    @rtransform :HighP = round(100 * coalesce(:High, 0) / :Total, digits=1)\nend\n```\n\n</details>\n<details>\n<summary>Data wrangling</summary>\n\n```{julia}\nadlb_summary = @chain adlb begin\n    groupby([:ORIG, :TRTA, :LBNRIND, :PARAM])\n    @combine :N = length(:LBNRIND)\n    unstack(:LBNRIND, :N, fill=0)\n    @rtransform :Total = coalesce(:Low, 0) + coalesce(:Normal, 0) + coalesce(:High, 0)\nend\n```\n\n</details>\n<details>\n<summary>Data wrangling</summary>\n\n```{julia}\ntbl_final = @chain adlb_summary begin\n    select(:ORIG, :TRTA, :PARAM, :Low, :Normal, :High, :Total)\n    stack([:Low, :Normal, :High], variable_name = :Category, value_name = :Count)\n    @rtransform :Percent = if :Total > 0\n        string(:Count, \" (\", round(100 * :Count / :Total, digits=1), \"%)\")\n    else\n        \"0 (0%)\"\n    end\nend\n```\n\n</details>\n\n\n```{julia}\n#| echo: false\n\ntbl4 = listingtable(\n    tbl_final,\n    :Percent,\n    rows = [:ORIG => \"\", :PARAM => \"\"],\n    cols = [:TRTA => \"Treatment\", :Category => \"Lab Status\"]\n)\n```\n\n\n\n## TABLE 12\n<details>\n<summary>Data Preparation - Table 12</summary>\n\n\n```{julia}\nadlbc2 = insertcols(copy(adlbc), :ORIG => fill(\"CHEMISTRY\", nrow(adlbc)))\nadlbh2 = insertcols(copy(adlbh), :ORIG => fill(\"HEMATOLOGY\", nrow(adlbh)))\nadlb = vcat(adlbc2, adlbh2)\n\n```\n\n</details>\n<details>\n<summary>Data wrangling</summary>\n\n```{julia}\nlab_keep = [\"Alanine Aminotransferase\", \"Albumin\", \"Basophils\", \"Eosinophils\"]\n\nadlb1 = @chain adlb begin\n    @transform :PARAM = strip.(replace.(string.(:PARAM), r\"\\(.*?\\)\" => \"\"))\n    @rsubset :SAFFL == \"Y\" &&\n             :AVISITN != 99 &&\n             strip(:VISIT) != \"SCREENING 1\" &&\n             !ismissing(:VISIT) && !ismissing(:TRTA) &&\n             !ismissing(:BNRIND) && !ismissing(:ANRIND) &&\n             !ismissing(:PARAM) && !startswith(:PARAMCD, \"_\") &&\n             :PARAM in lab_keep\n\n\n    @transform :TRTP = recode(categorical(:TRTP),\n        \"Placebo\" => \"Placebo\",\n        \"Xanomeline Low Dose\" => \"Low Dose\",\n        \"Xanomeline High Dose\" => \"High Dose\"\n    )\n    @transform :TRTP = categorical(:TRTP, levels=[\"Placebo\", \"Low Dose\", \"High Dose\"], ordered=true)\n    @transform :ANRIND = recode(categorical(:ANRIND),\n        \"N\" => \"Normal\", \"H\" => \"High\")\n    @transform :BNRIND = recode(categorical(:BNRIND),\n        \"N\" => \"Normal\", \"H\" => \"High\")\n    @rtransform :PARAM = replace(:PARAM, r\"\\(.*?\\)\" => \"\") |> strip\nend\n```\n\n</details>\n<details>\n<summary>Data wrangling</summary>\n\n```{julia}\ngroup_vars = [:ORIG, :PARAM, :PARAMCD, :TRTP, :VISIT]\nadlb_groups = groupby(adlb1, group_vars)\n```\n\n</details>\n<details>\n<summary>Data wrangling</summary>\n\n```{julia}\nfunction shift_table(df)\n    tbl = @chain df begin\n        groupby([:BNRIND, :ANRIND])\n        @combine :Count = length(:BNRIND)\n        unstack(:ANRIND, :Count, fill=0, allowmissing=true)\n        @transform :RowLabel = string(:BNRIND)\n    end\n    return select(tbl, :RowLabel, Not(:BNRIND))\nend\n```\n\n</details>\n<details>\n<summary>Data wrangling</summary>\n\n\n```{julia}\nusing Tables\n\nshifts_df = combine(adlb_groups) do sdf\n    tbl = shift_table(sdf)\n    (; ORIG = [first(sdf.ORIG)],\n       PARAM = [first(sdf.PARAM)],\n       PARAMCD = [first(sdf.PARAMCD)],\n       TRTP = [first(sdf.TRTP)],\n       VISIT = [first(sdf.VISIT)],\n       table = [tbl]) \nend\n```\n\n</details>\n<details>\n<summary>Data wrangling</summary>\n\n```{julia}\nrows = eachrow(shifts_df)\ntables_list = map(rows) do row\n    inner_tbl = deepcopy(row.table)\n    insertcols!(inner_tbl, 1,\n        :ORIG => row.ORIG,\n        :PARAM => row.PARAM,\n        :PARAMCD => row.PARAMCD,\n        :TRTP => row.TRTP,\n        :VISIT => row.VISIT\n    )\n    inner_tbl\nend\nshifts_long = vcat(tables_list...; cols = :union)\n```\n\n</details>\n<details>\n<summary>Data wrangling</summary>\n\n\n\n```{julia}\ntbl_final = @chain shifts_long begin\n    stack(Not([:ORIG, :PARAM, :PARAMCD, :TRTP, :VISIT, :RowLabel]),\n          variable_name=:ShiftTo, value_name=:Count)\n    @rtransform :Percent = ismissing(:Count) ? \"0 (0%)\" :\n                        (:Count == 0 ? \"0 (0%)\" :\n                        string(:Count, \" (\", round(100 * :Count / sum(skipmissing(:Count)), digits=1), \"%)\"))\n    select(:ORIG, :PARAM, :TRTP, :VISIT, :RowLabel, :ShiftTo, :Percent)\nend\n```\n\n</details>\n<details>\n<summary>Data wrangling</summary>\n\n```{julia}\ntbl_final_cleaned = @chain shifts_long begin\n    stack(Not([:ORIG, :PARAM, :PARAMCD, :TRTP, :VISIT, :RowLabel]),\n          variable_name = :ShiftTo, value_name = :Count)\n    @rsubset(:ShiftTo in [\"High\", \"Normal\"])\n    @rtransform :Percent = ismissing(:Count) ? \"0 (0%)\" :\n        (:Count == 0 ? \"0 (0%)\" :\n        string(:Count, \" (\", round(100 * :Count / sum(skipmissing(:Count)), digits = 1), \"%)\"))\n    @select :ORIG :PARAM :TRTP :VISIT :ShiftTo :Percent\nend\n```\n\n</details>\n<details>\n<summary>Data wrangling</summary>\n\n```{julia}\ntbl_f = @chain tbl_final_cleaned begin\n    groupby([:ORIG, :PARAM, :TRTP, :VISIT, :ShiftTo])\n    combine(_) do sdf\n        sdf[1, :] \n    end\nend\n```\n\n</details>\n\n\n```{julia}\n#| echo: false\n\ntbl5 = listingtable(\n    tbl_f,\n    :Percent,\n    rows = [:ORIG => \"\", :PARAM => \"\", :VISIT => \"\"],\n    rowgaps = [i => 6.0 for i = 1:40],\n    cols = [:TRTP => \"Treatment\", :ShiftTo => \"\"]\n)\n```\n\n"},"formats":{"html":{"identifier":{"display-name":"HTML","target-format":"html","base-format":"html"},"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":false,"echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"ipynb-shell-interactivity":null,"plotly-connected":true,"engine":"julia"},"render":{"keep-tex":false,"keep-typ":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-min-runs":1,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[],"notebook-links":true},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","toc":true,"output-file":"admiral-summarytables.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","other-links-title":"Other Links","code-links-title":"Code Links","launch-dev-container-title":"Launch Dev Container","launch-binder-title":"Launch Binder","article-notebook-label":"Article Notebook","notebook-preview-download":"Download Notebook","notebook-preview-download-src":"Download Source","notebook-preview-back":"Back to Article","manuscript-meca-bundle":"MECA Bundle","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","appendix-view-license":"View License","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","title-block-keywords":"Keywords","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","tools-share":"Share","tools-download":"Download","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-text-placeholder":"","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-wordcount":"Word Count","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items","listing-page-words":"{0} words","listing-page-filter":"Filter","draft":"Draft"},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.7.31","theme":"cosmo","title":"Summary statistics and tables","author":"Mohammed Shas","julia":{"execflags":["--project=."]}},"extensions":{"book":{"multiFile":true}}}},"projectFormats":["html"]}