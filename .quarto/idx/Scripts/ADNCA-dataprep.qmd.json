{"title":"Define the path and load the data","markdown":{"yaml":{"julia":{"execflags":["--project=."]}},"headingText":"Define the path and load the data","containsRefs":false,"markdown":"\n\n\n\n\n```{julia}\nusing DataFramesMeta\nusing ReadStatTables\nusing Statistics\nusing Dates\ninclude(\"con-fun.jl\")\n```\n\n\n\n\n\n\n```{julia}\npath = \"C:\\\\quarto_website\\\\quarto_project\\\\Datasets\"\npc = @chain readstat(joinpath(path, \"pc1.xpt\")) DataFrame convert_blanks_to_missing\nex = @chain readstat(joinpath(path, \"ex1.xpt\")) DataFrame convert_blanks_to_missing\nfirst(ex, 5)\n\n```\n\n\n\n## Lookup table\n\n```{julia}\nparam_lookup = DataFrame(\n    PCTESTCD = [\"DAPA\", \"DOSE\"],\n    PARAMCD = [\"DAPA\", \"DOSE\"],\n    PARAM = [\"Pharmacokinetic concentration of Dapagliflozin\", \"Dapagliflozin Dose\"],\n    PARAMN = [1, 2]\n)\n\ndose_freq_lookup = DataFrame(\n    CDISC_VALUE = [\"QD\", \"BID\", \"TID\", \"QID\"],\n    HOURS_BETWEEN_DOSES = [24, 12, 8, 6]\n)\n\n```\n\n\n\n```{julia}\npc = leftjoin(pc, ex[:, [:USUBJID, :VISIT, :VISITDY]], on = [:USUBJID, :VISIT])\nfirst(pc, 5)\n\n```\n\n\n\n## PC data preparation\n```{julia}\npc_prep = @chain pc begin\n    @rtransform :ADTM = parse_datetime_column(:PCDTC)\n    @rtransform :ADT = isnothing(:ADTM) || ismissing(:ADTM) ? missing : Date(:ADTM)\n    @rtransform :ATM = isnothing(:ADTM) || ismissing(:ADTM) ? missing : Time(:ADTM)\n\n    \n    @rtransform begin\n        :EVID = 0\n        :DRUG = :PCTEST\n        :NFRLT = :VISITDY == 1 ? 0 : 24 * :VISITDY \n    end\nend\nfirst(pc_prep, 5)\n\n```\n\n\n\n\n## ex data Prep\n\n```{julia}\nex_prep = @chain ex begin\n    @rsubset :EXDOSE > 0\n\n    @rtransform :EXENDTC = :EXSTDTC\n    @rtransform :ASTDTM = parse_datetime_column(:EXSTDTC)\n    @rtransform @passmissing :AENDTM = parse_datetime_column(:EXENDTC)\n    @rtransform :ASTDT = Date(:ASTDTM)\n    @rtransform @passmissing :AENDT = Date(:AENDTM)\n\n\n    @rtransform :AENDTM = ismissing(:AENDTM) ? :ASTDTM : :AENDTM\n    @rtransform :ADTM = :ASTDTM\n\n    @rtransform begin\n        :EVID = 1\n        :NFRLT = :VISITDY == 1 ? 0 : 24 * :VISITDY\n    end\nend\nfirst(ex_prep, 5)\n\n```\n\n\n\n\n## EXPANDING DOSE\n```{julia}\nex_exp = @chain ex_prep begin\n   leftjoin(dose_freq_lookup, on = [:EXDOSFRQ => :CDISC_VALUE])\nend   \nfirst(ex_exp, 5)\n\n```\n\n```{julia}\nex_exp1 = @chain ex_exp begin\n\n    @rtransform :AVISIT = \"Day $(:VISIT)\"\n    @rtransform :DRUG = :EXTRT\n    @rtransform :ADT = Date(:ADTM)\n    @rtransform :ASTTM = Time(:ASTDTM)\n    @rtransform :AENTM = Time(:AENDTM)\n    # @rtransform :ADY = Dates.value(:ADT - :TRTSDT) + 1\nend\nfirst(ex_exp1, 5)\n\n```\n\n\n\n# Find first dose per treatment per subject\n\n```{julia}\nadpc_first_dose = @chain ex_exp1 begin\n\n    @rsubset :EXDOSE > 0 && !ismissing(:ASTDTM)\n\n    combine(groupby(_,[:STUDYID, :USUBJID, :DRUG]),:ASTDTM => (x->minimum(x)) => :FANLDTM)\n\n    leftjoin(pc_prep,_,on = [:STUDYID, :USUBJID, :DRUG], makeunique=true)\n\n    @rsubset !ismissing(:FANLDTM)\n\n    @rtransform :AVISITN = (:NFRLT รท 24) + 1\n    @rtransform :AVISIT = \"Day $(:VISIT)\"\nend\nfirst(adpc_first_dose, 5)\n\n```\n\n\n\n## FIND PREVIOUS DOSE\n## FIND NEXT DOSE\n\n```{julia}\nadpc_nom_next = @chain adpc_first_dose begin\n    find_previous_dose(ex_exp1)\n    find_next_dose(ex_exp1)\n    find_previous_nominal_time(ex_exp1)\n    find_next_nominal_time(ex_exp1)\nend\nfirst(adpc_nom_next, 5)\n\n```\n\n\n\n\n# Derive Relative Time Variables\n\n```{julia}\nadpc_arrlt = vcat(adpc_nom_next, ex_exp1,cols = :union)\nadpc_arrlt.USUBJID = String.(adpc_arrlt.USUBJID)\nadpc_arrlt.DRUG = String.(adpc_arrlt.DRUG)\n\nadpc_arrlt = @chain adpc_arrlt begin\n    @groupby([:USUBJID, :DRUG])\n    @transform(\n        :maxdate = begin\n            ev0_idx = (:EVID .== 0) .&& .!ismissing.(:ADT)\n            isempty(:ADT[ev0_idx]) ? missing : maximum(:ADT[ev0_idx])\n        end,\n        :FANLDTM = minimum(skipmissing(:FANLDTM)),\n        :min_NFRLT = minimum(skipmissing(:NFRLT_prev))\n    )\n\n    @rsubset(:ADT <= :maxdate || ismissing(:maxdate))\n\n    @rtransform :AFRLT = ismissing(:FANLDTM) || ismissing(:ADTM) ?\n                         missing : Dates.value(:ADTM - :FANLDTM) / 3600000\n\n    @rtransform :ARRLT = ismissing(:ADTM_prev) || ismissing(:ADTM) ?\n                         missing : Dates.value(:ADTM - :ADTM_prev) / 3600000\n\n    @rtransform :AXRLT = ismissing(:ADTM_next) || ismissing(:ADTM) ?\n                         missing : Dates.value(:ADTM - :ADTM_next) / 3600000\n\n    @rtransform :ARRLT = (:EVID == 1) ? 0 : ismissing(:ARRLT) ? :AXRLT : :ARRLT\n\n    @rtransform :PCRFTDTM = (:EVID == 1) ? :ADTM :\n                            ismissing(:ADTM_prev) ? :ADTM_next : :ADTM_prev\n\n    @rtransform @passmissing begin\n        :FANLDT = Date(:FANLDTM)\n        :FANLTM = Time(:FANLDTM)\n        :PCRFTDT = Date(:PCRFTDTM)\n        :PCRFTTM = Time(:PCRFTDTM)\n    end\nend\nfirst(adpc_arrlt, 5)\n\n```\n\n\n\n## Derive Nominal Relative Time from Reference Dose (NRRLT)\n\n```{julia}\nadpc_nrrlt = @chain adpc_arrlt begin\n    @rtransform begin\n        :NRRLT = :EVID == 1 ? 0.0 :\n                    ismissing(:NFRLT_prev) ? :NFRLT - :min_NFRLT :\n                    :NFRLT - :NFRLT_prev\n\n        :NXRLT = :EVID == 1 ? 0.0 :\n                    :NFRLT - :NFRLT_next\n    end\nend\nfirst(adpc_nrrlt, 5)\n\n```\n\n\n\n\n# Derive Analysis Variables \n\n```{julia}\nadpc_aval = @chain adpc_nrrlt begin\n    @rtransform :PARCAT1 = :PCSPEC\n\n    @rtransform :ATPTN = (:EVID == 1) ? 0 : :PCTPTNUM\n    @rtransform :ATPT = (:EVID == 1) ? \"Dose\" : :PCTPT\n\n    @rtransform :ATPTREF = (:EVID == 1) ? :AVISIT : (ismissing(:AVISIT_prev) ? :AVISIT_next : :AVISIT_prev)\n\n    @rtransform :ABLFL = (:ATPT == \"Pre-dose\") ? \"Y\" : missing\n\n    @rtransform :BASETYPE = string(:ATPTREF, \" Baseline\")\n\n    @rtransform :DOSEA = (:EVID == 1) ? :EXDOSE : (ismissing(:EXDOSE_prev) ? :EXDOSE_next : :EXDOSE_prev)\n    @rtransform :DOSEU = \"mg\"\n\n    @rtransform :FRLTU = \"h\"\n    @rtransform :RRLTU = \"h\"\n\n    @rtransform :PARAMCD = coalesce(:PCTESTCD, \"DOSE\")\n    @rtransform :ALLOQ = :PCLLOQ\n\n   @rtransform :AVAL = \n    (:EVID == 1) ? :EXDOSE :\n    ((:PCSTRESC == \"<BLQ\" && !ismissing(:NFRLT) && :NFRLT == 0) ? 0 :\n    ((:PCSTRESC == \"<BLQ\" && !ismissing(:NFRLT) && :NFRLT > 0) ? \n        (ismissing(:ALLOQ) ? missing : \n         let m = match(r\"^([\\d.]+)\", string(:ALLOQ))\n             m === nothing ? missing : 0.5 * parse(Float64, m.captures[1])\n         end) :\n    (!ismissing(:PCSTRESN) ? :PCSTRESN : missing)))\n\n    @rtransform :AVALU = (:EVID == 1) ? :EXDOSU : :PCSTRESU\n\n    @rtransform :AVALCAT1 = (!ismissing(:PCSTRESC) && :PCSTRESC == \"<BLQ\") ? \"<BLQ\" :\n                             (ismissing(:AVAL) ? missing : string(round(:AVAL, sigdigits=3)))\n\n    @rtransform :SRCDOM = :DOMAIN\n    @rtransform :SRCVAR = \"SEQ\"\n    @rtransform :SRCSEQ = coalesce(:PCSEQ, :EXSEQ)\nend\nfirst(adpc_aval, 5)\n\n```\n\n\n\n#  Create DTYPE copy records \n\n```{julia}\ndtype = @chain adpc_aval begin\n    \n    @select Not([:PCRFTDT, :PCRFTTM])\n    \n    @rtransform(\n        :ABLFL = \"Y\",\n        :ATPTREF = :AVISIT_next,\n        :NRRLT = :NXRLT,\n        :PCRFTDTM = :ADTM_next,\n        :DOSEA = :EXDOSE_next,\n        :BASETYPE = string(:AVISIT_next, \" Baseline\"),\n        :ATPT = \"Pre-dose\",\n        :ATPTN = -0.5,\n        :DTYPE = \"COPY\"\n    )\n    \n  @rtransform begin\n        :PCRFTDT = ismissing(:PCRFTDTM) ? missing : Date(:PCRFTDTM)\n        :PCRFTTM = ismissing(:PCRFTDTM) ? missing : Dates.format(:PCRFTDTM, \"HH:MM:SS\")\n    end\nend\nfirst(dtype, 5)\n\n```\n\n\n\n\n```{julia}\nadpc_dtype = @chain vcat(adpc_aval, dtype; cols = :union) begin\n    sort!([:STUDYID, :USUBJID, :BASETYPE, :ADTM, :NFRLT])\n\n    @rtransform :MRRLT = (!ismissing(:ARRLT) && :ARRLT < 0) ? 0 : :ARRLT\n\n    @rtransform :ANL01FL = \"Y\"\n\n    @rtransform :ANL02FL = ismissing(:DTYPE) ? \"Y\" : missing\nend\n```\n\n\n\n\n```{julia}\nadpc_base = @chain adpc_dtype begin\n    groupby([:STUDYID, :USUBJID, :PARAMCD, :PARCAT1, :BASETYPE])\n    @transform :BASE = begin\n        base_vals = :AVAL[ .!ismissing.(:ABLFL) .& (:ABLFL .== \"Y\") ]\n        isempty(base_vals) ? missing : base_vals[1]\n    end\nend\nfirst(adpc_base, 5)\n\n```\n\n\n\n# Derive BASE and Calculate Change from Baseline \n\n\n```{julia}\nadpc_chg = @chain adpc_base begin\n    @rtransform :CHG = (!ismissing(:AVISITN) && :AVISITN > 0 && !ismissing(:AVAL) && !ismissing(:BASE)) ?\n                        :AVAL - :BASE : missing\nend\nfirst(adpc_chg, 5)\n\n```\n\n\n\n\n# Add ASEQ\n\n```{julia}\nadpc_aseq = @chain adpc_chg begin\n           groupby([:STUDYID, :USUBJID])\n           @transform :ASEQ = 1:length(:STUDYID)\n\n           @select(Not([:DOMAIN, :PCSEQ, :DRUG, :EVID, :AXRLT, :NXRLT, :VISITDY]))\n           @select(Not(r\"^orig\"))\n           @select(Not(r\"^min\"))\n           @select(Not(r\"^max\"))\n           @select(Not(r\"^EX\"))\n           @select(Not(r\"next$\"))\n           @select(Not(r\"prev$\"))\n           @select(Not(r\"^PC\"))\n\n           leftjoin(param_lookup[:, Not(:PCTESTCD)], on = :PARAMCD) \n       end\nfirst(adpc_aseq, 5)\n\n```\n\n\n```{julia}\nfor col in names(adpc_aseq)\n    adpc_aseq[!, col] = replace(adpc_aseq[!, col], missing => \"missing\")\nend\nfirst(adpc_aseq, 5)\n```\n\n\n\n\n\n","srcMarkdownNoYaml":"\n\n\n\n\n```{julia}\nusing DataFramesMeta\nusing ReadStatTables\nusing Statistics\nusing Dates\ninclude(\"con-fun.jl\")\n```\n\n\n\n\n\n## Define the path and load the data\n\n```{julia}\npath = \"C:\\\\quarto_website\\\\quarto_project\\\\Datasets\"\npc = @chain readstat(joinpath(path, \"pc1.xpt\")) DataFrame convert_blanks_to_missing\nex = @chain readstat(joinpath(path, \"ex1.xpt\")) DataFrame convert_blanks_to_missing\nfirst(ex, 5)\n\n```\n\n\n\n## Lookup table\n\n```{julia}\nparam_lookup = DataFrame(\n    PCTESTCD = [\"DAPA\", \"DOSE\"],\n    PARAMCD = [\"DAPA\", \"DOSE\"],\n    PARAM = [\"Pharmacokinetic concentration of Dapagliflozin\", \"Dapagliflozin Dose\"],\n    PARAMN = [1, 2]\n)\n\ndose_freq_lookup = DataFrame(\n    CDISC_VALUE = [\"QD\", \"BID\", \"TID\", \"QID\"],\n    HOURS_BETWEEN_DOSES = [24, 12, 8, 6]\n)\n\n```\n\n\n\n```{julia}\npc = leftjoin(pc, ex[:, [:USUBJID, :VISIT, :VISITDY]], on = [:USUBJID, :VISIT])\nfirst(pc, 5)\n\n```\n\n\n\n## PC data preparation\n```{julia}\npc_prep = @chain pc begin\n    @rtransform :ADTM = parse_datetime_column(:PCDTC)\n    @rtransform :ADT = isnothing(:ADTM) || ismissing(:ADTM) ? missing : Date(:ADTM)\n    @rtransform :ATM = isnothing(:ADTM) || ismissing(:ADTM) ? missing : Time(:ADTM)\n\n    \n    @rtransform begin\n        :EVID = 0\n        :DRUG = :PCTEST\n        :NFRLT = :VISITDY == 1 ? 0 : 24 * :VISITDY \n    end\nend\nfirst(pc_prep, 5)\n\n```\n\n\n\n\n## ex data Prep\n\n```{julia}\nex_prep = @chain ex begin\n    @rsubset :EXDOSE > 0\n\n    @rtransform :EXENDTC = :EXSTDTC\n    @rtransform :ASTDTM = parse_datetime_column(:EXSTDTC)\n    @rtransform @passmissing :AENDTM = parse_datetime_column(:EXENDTC)\n    @rtransform :ASTDT = Date(:ASTDTM)\n    @rtransform @passmissing :AENDT = Date(:AENDTM)\n\n\n    @rtransform :AENDTM = ismissing(:AENDTM) ? :ASTDTM : :AENDTM\n    @rtransform :ADTM = :ASTDTM\n\n    @rtransform begin\n        :EVID = 1\n        :NFRLT = :VISITDY == 1 ? 0 : 24 * :VISITDY\n    end\nend\nfirst(ex_prep, 5)\n\n```\n\n\n\n\n## EXPANDING DOSE\n```{julia}\nex_exp = @chain ex_prep begin\n   leftjoin(dose_freq_lookup, on = [:EXDOSFRQ => :CDISC_VALUE])\nend   \nfirst(ex_exp, 5)\n\n```\n\n```{julia}\nex_exp1 = @chain ex_exp begin\n\n    @rtransform :AVISIT = \"Day $(:VISIT)\"\n    @rtransform :DRUG = :EXTRT\n    @rtransform :ADT = Date(:ADTM)\n    @rtransform :ASTTM = Time(:ASTDTM)\n    @rtransform :AENTM = Time(:AENDTM)\n    # @rtransform :ADY = Dates.value(:ADT - :TRTSDT) + 1\nend\nfirst(ex_exp1, 5)\n\n```\n\n\n\n# Find first dose per treatment per subject\n\n```{julia}\nadpc_first_dose = @chain ex_exp1 begin\n\n    @rsubset :EXDOSE > 0 && !ismissing(:ASTDTM)\n\n    combine(groupby(_,[:STUDYID, :USUBJID, :DRUG]),:ASTDTM => (x->minimum(x)) => :FANLDTM)\n\n    leftjoin(pc_prep,_,on = [:STUDYID, :USUBJID, :DRUG], makeunique=true)\n\n    @rsubset !ismissing(:FANLDTM)\n\n    @rtransform :AVISITN = (:NFRLT รท 24) + 1\n    @rtransform :AVISIT = \"Day $(:VISIT)\"\nend\nfirst(adpc_first_dose, 5)\n\n```\n\n\n\n## FIND PREVIOUS DOSE\n## FIND NEXT DOSE\n\n```{julia}\nadpc_nom_next = @chain adpc_first_dose begin\n    find_previous_dose(ex_exp1)\n    find_next_dose(ex_exp1)\n    find_previous_nominal_time(ex_exp1)\n    find_next_nominal_time(ex_exp1)\nend\nfirst(adpc_nom_next, 5)\n\n```\n\n\n\n\n# Derive Relative Time Variables\n\n```{julia}\nadpc_arrlt = vcat(adpc_nom_next, ex_exp1,cols = :union)\nadpc_arrlt.USUBJID = String.(adpc_arrlt.USUBJID)\nadpc_arrlt.DRUG = String.(adpc_arrlt.DRUG)\n\nadpc_arrlt = @chain adpc_arrlt begin\n    @groupby([:USUBJID, :DRUG])\n    @transform(\n        :maxdate = begin\n            ev0_idx = (:EVID .== 0) .&& .!ismissing.(:ADT)\n            isempty(:ADT[ev0_idx]) ? missing : maximum(:ADT[ev0_idx])\n        end,\n        :FANLDTM = minimum(skipmissing(:FANLDTM)),\n        :min_NFRLT = minimum(skipmissing(:NFRLT_prev))\n    )\n\n    @rsubset(:ADT <= :maxdate || ismissing(:maxdate))\n\n    @rtransform :AFRLT = ismissing(:FANLDTM) || ismissing(:ADTM) ?\n                         missing : Dates.value(:ADTM - :FANLDTM) / 3600000\n\n    @rtransform :ARRLT = ismissing(:ADTM_prev) || ismissing(:ADTM) ?\n                         missing : Dates.value(:ADTM - :ADTM_prev) / 3600000\n\n    @rtransform :AXRLT = ismissing(:ADTM_next) || ismissing(:ADTM) ?\n                         missing : Dates.value(:ADTM - :ADTM_next) / 3600000\n\n    @rtransform :ARRLT = (:EVID == 1) ? 0 : ismissing(:ARRLT) ? :AXRLT : :ARRLT\n\n    @rtransform :PCRFTDTM = (:EVID == 1) ? :ADTM :\n                            ismissing(:ADTM_prev) ? :ADTM_next : :ADTM_prev\n\n    @rtransform @passmissing begin\n        :FANLDT = Date(:FANLDTM)\n        :FANLTM = Time(:FANLDTM)\n        :PCRFTDT = Date(:PCRFTDTM)\n        :PCRFTTM = Time(:PCRFTDTM)\n    end\nend\nfirst(adpc_arrlt, 5)\n\n```\n\n\n\n## Derive Nominal Relative Time from Reference Dose (NRRLT)\n\n```{julia}\nadpc_nrrlt = @chain adpc_arrlt begin\n    @rtransform begin\n        :NRRLT = :EVID == 1 ? 0.0 :\n                    ismissing(:NFRLT_prev) ? :NFRLT - :min_NFRLT :\n                    :NFRLT - :NFRLT_prev\n\n        :NXRLT = :EVID == 1 ? 0.0 :\n                    :NFRLT - :NFRLT_next\n    end\nend\nfirst(adpc_nrrlt, 5)\n\n```\n\n\n\n\n# Derive Analysis Variables \n\n```{julia}\nadpc_aval = @chain adpc_nrrlt begin\n    @rtransform :PARCAT1 = :PCSPEC\n\n    @rtransform :ATPTN = (:EVID == 1) ? 0 : :PCTPTNUM\n    @rtransform :ATPT = (:EVID == 1) ? \"Dose\" : :PCTPT\n\n    @rtransform :ATPTREF = (:EVID == 1) ? :AVISIT : (ismissing(:AVISIT_prev) ? :AVISIT_next : :AVISIT_prev)\n\n    @rtransform :ABLFL = (:ATPT == \"Pre-dose\") ? \"Y\" : missing\n\n    @rtransform :BASETYPE = string(:ATPTREF, \" Baseline\")\n\n    @rtransform :DOSEA = (:EVID == 1) ? :EXDOSE : (ismissing(:EXDOSE_prev) ? :EXDOSE_next : :EXDOSE_prev)\n    @rtransform :DOSEU = \"mg\"\n\n    @rtransform :FRLTU = \"h\"\n    @rtransform :RRLTU = \"h\"\n\n    @rtransform :PARAMCD = coalesce(:PCTESTCD, \"DOSE\")\n    @rtransform :ALLOQ = :PCLLOQ\n\n   @rtransform :AVAL = \n    (:EVID == 1) ? :EXDOSE :\n    ((:PCSTRESC == \"<BLQ\" && !ismissing(:NFRLT) && :NFRLT == 0) ? 0 :\n    ((:PCSTRESC == \"<BLQ\" && !ismissing(:NFRLT) && :NFRLT > 0) ? \n        (ismissing(:ALLOQ) ? missing : \n         let m = match(r\"^([\\d.]+)\", string(:ALLOQ))\n             m === nothing ? missing : 0.5 * parse(Float64, m.captures[1])\n         end) :\n    (!ismissing(:PCSTRESN) ? :PCSTRESN : missing)))\n\n    @rtransform :AVALU = (:EVID == 1) ? :EXDOSU : :PCSTRESU\n\n    @rtransform :AVALCAT1 = (!ismissing(:PCSTRESC) && :PCSTRESC == \"<BLQ\") ? \"<BLQ\" :\n                             (ismissing(:AVAL) ? missing : string(round(:AVAL, sigdigits=3)))\n\n    @rtransform :SRCDOM = :DOMAIN\n    @rtransform :SRCVAR = \"SEQ\"\n    @rtransform :SRCSEQ = coalesce(:PCSEQ, :EXSEQ)\nend\nfirst(adpc_aval, 5)\n\n```\n\n\n\n#  Create DTYPE copy records \n\n```{julia}\ndtype = @chain adpc_aval begin\n    \n    @select Not([:PCRFTDT, :PCRFTTM])\n    \n    @rtransform(\n        :ABLFL = \"Y\",\n        :ATPTREF = :AVISIT_next,\n        :NRRLT = :NXRLT,\n        :PCRFTDTM = :ADTM_next,\n        :DOSEA = :EXDOSE_next,\n        :BASETYPE = string(:AVISIT_next, \" Baseline\"),\n        :ATPT = \"Pre-dose\",\n        :ATPTN = -0.5,\n        :DTYPE = \"COPY\"\n    )\n    \n  @rtransform begin\n        :PCRFTDT = ismissing(:PCRFTDTM) ? missing : Date(:PCRFTDTM)\n        :PCRFTTM = ismissing(:PCRFTDTM) ? missing : Dates.format(:PCRFTDTM, \"HH:MM:SS\")\n    end\nend\nfirst(dtype, 5)\n\n```\n\n\n\n\n```{julia}\nadpc_dtype = @chain vcat(adpc_aval, dtype; cols = :union) begin\n    sort!([:STUDYID, :USUBJID, :BASETYPE, :ADTM, :NFRLT])\n\n    @rtransform :MRRLT = (!ismissing(:ARRLT) && :ARRLT < 0) ? 0 : :ARRLT\n\n    @rtransform :ANL01FL = \"Y\"\n\n    @rtransform :ANL02FL = ismissing(:DTYPE) ? \"Y\" : missing\nend\n```\n\n\n\n\n```{julia}\nadpc_base = @chain adpc_dtype begin\n    groupby([:STUDYID, :USUBJID, :PARAMCD, :PARCAT1, :BASETYPE])\n    @transform :BASE = begin\n        base_vals = :AVAL[ .!ismissing.(:ABLFL) .& (:ABLFL .== \"Y\") ]\n        isempty(base_vals) ? missing : base_vals[1]\n    end\nend\nfirst(adpc_base, 5)\n\n```\n\n\n\n# Derive BASE and Calculate Change from Baseline \n\n\n```{julia}\nadpc_chg = @chain adpc_base begin\n    @rtransform :CHG = (!ismissing(:AVISITN) && :AVISITN > 0 && !ismissing(:AVAL) && !ismissing(:BASE)) ?\n                        :AVAL - :BASE : missing\nend\nfirst(adpc_chg, 5)\n\n```\n\n\n\n\n# Add ASEQ\n\n```{julia}\nadpc_aseq = @chain adpc_chg begin\n           groupby([:STUDYID, :USUBJID])\n           @transform :ASEQ = 1:length(:STUDYID)\n\n           @select(Not([:DOMAIN, :PCSEQ, :DRUG, :EVID, :AXRLT, :NXRLT, :VISITDY]))\n           @select(Not(r\"^orig\"))\n           @select(Not(r\"^min\"))\n           @select(Not(r\"^max\"))\n           @select(Not(r\"^EX\"))\n           @select(Not(r\"next$\"))\n           @select(Not(r\"prev$\"))\n           @select(Not(r\"^PC\"))\n\n           leftjoin(param_lookup[:, Not(:PCTESTCD)], on = :PARAMCD) \n       end\nfirst(adpc_aseq, 5)\n\n```\n\n\n```{julia}\nfor col in names(adpc_aseq)\n    adpc_aseq[!, col] = replace(adpc_aseq[!, col], missing => \"missing\")\nend\nfirst(adpc_aseq, 5)\n```\n\n\n\n\n\n"},"formats":{"html":{"identifier":{"display-name":"HTML","target-format":"html","base-format":"html"},"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":false,"echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"ipynb-shell-interactivity":null,"plotly-connected":true,"engine":"julia"},"render":{"keep-tex":false,"keep-typ":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-min-runs":1,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[],"notebook-links":true},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","toc":true,"output-file":"ADNCA-dataprep.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","other-links-title":"Other Links","code-links-title":"Code Links","launch-dev-container-title":"Launch Dev Container","launch-binder-title":"Launch Binder","article-notebook-label":"Article Notebook","notebook-preview-download":"Download Notebook","notebook-preview-download-src":"Download Source","notebook-preview-back":"Back to Article","manuscript-meca-bundle":"MECA Bundle","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","appendix-view-license":"View License","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","title-block-keywords":"Keywords","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","tools-share":"Share","tools-download":"Download","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-text-placeholder":"","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-wordcount":"Word Count","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items","listing-page-words":"{0} words","listing-page-filter":"Filter","draft":"Draft"},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.7.31","theme":"cosmo","julia":{"execflags":["--project=."]}},"extensions":{"book":{"multiFile":true}}}},"projectFormats":["html"]}